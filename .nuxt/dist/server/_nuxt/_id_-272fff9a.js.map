{"version":3,"file":"_id_-272fff9a.js","sources":["../../../../composables/useDeepSearch.ts","../../../../data/manualTestResultsStatusOptions.ts","../../../../composables/useAuditFilters.ts","../../../../components/AuditResults.vue","../../../../pages/audit/[id].vue"],"sourcesContent":["export function useDeepSearch(\n  obj: Record<string, any>,\n  target: string,\n  maxDepth = 3\n): Record<string, any>[] {\n  const foundObjects: Record<string, any>[] = []\n  const stack: { obj: Record<string, any>; depth: number }[] = [\n    { obj, depth: 0 },\n  ]\n\n  while (stack.length > 0) {\n    const stackItem = stack.pop()\n\n    if (!stackItem) {\n      break\n    }\n\n    const { obj: currentObj, depth } = stackItem\n\n    if (depth > maxDepth) {\n      continue\n    }\n\n    if (typeof currentObj === 'object' && currentObj !== null) {\n      for (const value of Object.values(currentObj)) {\n        if (\n          typeof value === 'string' &&\n          value.toLowerCase().includes(target.toLowerCase())\n        ) {\n          foundObjects.push(currentObj)\n          break\n        } else if (typeof value === 'object' && value !== null) {\n          stack.push({ obj: value, depth: depth + 1 })\n        }\n      }\n    }\n  }\n\n  return foundObjects\n}\n","export const manualTestResultsStatusOptions = [\n  'Not tested',\n  'Not applicable',\n  'Passed',\n  'Failed',\n] as const\n","import type { FormData } from 'types/supabase'\nimport type { Audit, AuditInfo } from 'types/audit'\n\nimport { getStatus } from '~/utils/get-status'\nimport { manualTestResultsStatusOptions } from '~/data/manualTestResultsStatusOptions'\n\nfunction addToUniqueList(\n  list: string[],\n  value: AuditInfo['Level' | 'WCAG SC' | 'Test Category']\n): void {\n  const items =\n    typeof value === 'string' ? [value] : Array.isArray(value) ? [...value] : []\n  items.forEach((item) => {\n    if (!list.includes(item)) {\n      list.push(item)\n    }\n  })\n}\n\nexport default function useAuditFilters(\n  audit: Ref<Audit>,\n  formData: Ref<FormData>\n) {\n  const selectedItems = ref({\n    selectedWcagSc: [],\n    selectedLevel: [],\n    selectedStatus: [],\n    selectedCategory: [],\n  })\n  const optionLists = ref<{\n    wcagScList: string[]\n    levelList: string[]\n    statusList: typeof manualTestResultsStatusOptions\n    categoryList: string[]\n  }>({\n    wcagScList: [],\n    levelList: [],\n    statusList: manualTestResultsStatusOptions,\n    categoryList: [],\n  })\n\n  const searchValue = ref('')\n  const searchValueDebounced = refDebounced(searchValue, 300)\n\n  function extractSelectedCodes(selectedItems: string[]): Set<string> {\n    return new Set((selectedItems || []).map((value) => value))\n  }\n\n  // Get available filters\n  audit.value.forEach((test) => {\n    addToUniqueList(optionLists.value.wcagScList, test.info['WCAG SC'])\n    addToUniqueList(optionLists.value.levelList, test.info.Level)\n    addToUniqueList(optionLists.value.categoryList, test.info['Test Category'])\n  })\n  optionLists.value.wcagScList.sort()\n  optionLists.value.categoryList.sort()\n\n  for (const [, value] of Object.entries(formData.value)) {\n    if (typeof value === 'object' && value !== null && 'status' in value) {\n      addToUniqueList(\n        optionLists.value.statusList as unknown as string[],\n        value.status as string\n      )\n    }\n  }\n\n  const filteredAudit: Ref<Audit> = computed(() => {\n    if (\n      selectedItems.value.selectedWcagSc.length === 0 &&\n      selectedItems.value.selectedLevel.length === 0 &&\n      selectedItems.value.selectedStatus.length === 0 &&\n      selectedItems.value.selectedCategory.length === 0 &&\n      !searchValueDebounced.value\n    ) {\n      return audit.value\n    } else {\n      // Filters part\n      const selectedWcagCodes = extractSelectedCodes(\n        selectedItems.value.selectedWcagSc\n      )\n      const selectedLevels = extractSelectedCodes(\n        selectedItems.value.selectedLevel\n      )\n      const selectedStatuses = extractSelectedCodes(\n        selectedItems.value.selectedStatus\n      )\n      const selectedCategories = extractSelectedCodes(\n        selectedItems.value.selectedCategory\n      )\n\n      const filteredTests = audit.value.filter((element) => {\n        const filteredWcag =\n          selectedWcagCodes.size === 0 ||\n          element.info['WCAG SC']?.some((value) => selectedWcagCodes.has(value))\n        const filteredLevel =\n          selectedLevels.size === 0 ||\n          (element.info.Level && selectedLevels?.has(element.info.Level))\n        const filteredStatus =\n          selectedStatuses.size === 0 ||\n          selectedStatuses.has(\n            getStatus({\n              automaticTestResultsStatus: element.automaticTestResultsStatus,\n              manualTestResultsStatus:\n                formData.value[element.id].manualTestResultsStatus,\n            })\n          )\n        const filteredCategories =\n          selectedCategories.size === 0 ||\n          selectedCategories.has(element.info['Test Category'])\n\n        return (\n          filteredWcag && filteredLevel && filteredStatus && filteredCategories\n        )\n      })\n\n      // Search part\n      let foundObjects = filteredTests\n\n      if (\n        searchValueDebounced.value &&\n        searchValueDebounced.value.length >= 3\n      ) {\n        foundObjects = []\n        filteredTests.forEach((item) => {\n          const found = useDeepSearch(item, searchValueDebounced.value)\n          if (found.length > 0) {\n            foundObjects.push(item)\n          }\n        })\n      }\n\n      return foundObjects\n    }\n  })\n\n  return {\n    filteredAudit,\n    selectedItems,\n    optionLists,\n    searchValue,\n  }\n}\n","<script lang=\"ts\" setup>\n// @ts-ignore\nimport { DynamicScroller, DynamicScrollerItem } from 'vue-virtual-scroller'\nimport type { Axe } from 'types/database'\n\nconst props = defineProps<{\n  result: Axe\n}>()\n\nconst {\n  audit,\n  isSaving,\n  formData,\n  isFormDataEdited,\n  updateField,\n  saveFormData,\n} = await useAudit(props.result)\n\nconst { filteredAudit, optionLists, searchValue, selectedItems } =\n  useAuditFilters(audit, formData)\n\nconst resultsHeader = ref<HTMLElement | null>(null)\nconst isResultsHeaderVisible = ref(false)\nuseIntersectionObserver(resultsHeader, ([{ isIntersecting }]) => {\n  isResultsHeaderVisible.value = isIntersecting\n})\n\nconst isSelectReportTypeModalVisible = ref(false)\n</script>\n\n<template>\n  <Transition\n    enter-active-class=\"transition duration-300 ease-out\"\n    enter-from-class=\"transform scale-95 opacity-0\"\n    enter-to-class=\"transform scale-100 opacity-100\"\n    leave-active-class=\"transition duration-75 ease-in\"\n    leave-from-class=\"transform scale-100 opacity-100\"\n    leave-to-class=\"transform scale-95 opacity-0\"\n  >\n    <InlineMessage\n      v-show=\"isFormDataEdited\"\n      severity=\"warn\"\n      class=\"flex w-full items-center !justify-start\"\n    >\n      Save your changes before selecting different url, selector or device.\n    </InlineMessage>\n  </Transition>\n  <div\n    ref=\"resultsHeader\"\n    class=\"flex flex-col items-center justify-between gap-x-10 gap-y-4 md:flex-row\"\n  >\n    <h2 class=\"font-medium\">\n      #{{ result.id }}: Results for\n      <NuxtLink\n        v-if=\"result.results.url\"\n        :to=\"result.results.url\"\n        target=\"_blank\"\n        class=\"mr-auto break-all\"\n      >\n        {{ result.results.url }}\n      </NuxtLink>\n      <span\n        v-else\n        class=\"mr-auto break-all\"\n      >\n        {{ result.size }}\n      </span>\n    </h2>\n    <div\n      class=\"w-full\"\n      :class=\"{\n        'md:w-[320px]': isResultsHeaderVisible,\n        'fixed bottom-0 right-0 z-20 border-t bg-white shadow-[0_-1px_6px_0_rgba(0,0,0,0.1)] md:border-none md:bg-transparent md:shadow-none':\n          !isResultsHeaderVisible,\n      }\"\n    >\n      <div\n        class=\"w-full\"\n        :class=\"{\n          'flex justify-end p-4 xl:container xl:mx-auto':\n            !isResultsHeaderVisible,\n        }\"\n      >\n        <Button\n          v-if=\"isFormDataEdited\"\n          :disabled=\"isSaving\"\n          class=\"p-button-lg w-full shrink justify-center\"\n          :class=\"{\n            'md:w-[320px]': !isResultsHeaderVisible,\n          }\"\n          @click=\"saveFormData\"\n        >\n          Save\n        </Button>\n        <Button\n          v-else\n          class=\"p-button-lg w-full shrink justify-center\"\n          :class=\"{\n            'md:w-[320px]': !isResultsHeaderVisible,\n          }\"\n          severity=\"success\"\n          @click=\"isSelectReportTypeModalVisible = true\"\n        >\n          Generate report\n        </Button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"grid grid-cols-1 gap-x-6 gap-y-4 md:grid-cols-2 lg:grid-cols-3\">\n    <div>\n      <label\n        for=\"wcagScList\"\n        class=\"mb-2 block font-medium\"\n      >\n        WCAG SC\n      </label>\n      <!-- option-label prop is required for filtering -->\n      <MultiSelect\n        id=\"wcagScList\"\n        v-model=\"selectedItems.selectedWcagSc\"\n        :options=\"optionLists.wcagScList\"\n        filter\n        :option-label=\"(data) => data\"\n        placeholder=\"WCAG SC\"\n        class=\"w-full\"\n        :max-selected-labels=\"3\"\n      />\n    </div>\n    <div>\n      <label\n        for=\"categoryList\"\n        class=\"mb-2 block font-medium\"\n      >\n        Test Category\n      </label>\n      <MultiSelect\n        id=\"categoryList\"\n        v-model=\"selectedItems.selectedCategory\"\n        filter\n        :options=\"optionLists.categoryList\"\n        :option-label=\"(data) => data\"\n        placeholder=\"Category\"\n        class=\"w-full\"\n        :max-selected-labels=\"2\"\n      />\n    </div>\n    <div>\n      <label\n        for=\"levelList\"\n        class=\"mb-2 block font-medium\"\n      >\n        Level\n      </label>\n      <MultiSelect\n        id=\"levelList\"\n        v-model=\"selectedItems.selectedLevel\"\n        :options=\"optionLists.levelList\"\n        placeholder=\"Level\"\n        class=\"w-full\"\n        :max-selected-labels=\"2\"\n      />\n    </div>\n    <div>\n      <label\n        for=\"statusList\"\n        class=\"mb-2 block font-medium\"\n      >\n        Status\n      </label>\n      <MultiSelect\n        id=\"statusList\"\n        v-model=\"selectedItems.selectedStatus\"\n        :options=\"(optionLists.statusList as unknown as any[])\"\n        placeholder=\"Status\"\n        class=\"w-full\"\n        :max-selected-labels=\"2\"\n      />\n    </div>\n    <div class=\"md:col-span-2\">\n      <label\n        for=\"search\"\n        class=\"mb-2 block font-medium\"\n      >\n        Search\n      </label>\n      <div class=\"p-input-icon-left w-full\">\n        <i class=\"pi pi-search\" />\n        <InputText\n          id=\"search\"\n          v-model=\"searchValue\"\n          placeholder=\"Search (3 characters minimum)\"\n          class=\"h-10 w-full\"\n        />\n      </div>\n    </div>\n  </div>\n\n  <ClientOnly>\n    <DynamicScroller\n      :items=\"filteredAudit\"\n      :min-item-size=\"508\"\n      page-mode\n    >\n      <template #default=\"{ item: test, index, active }\">\n        <DynamicScrollerItem\n          :item=\"test\"\n          :active=\"active\"\n          :size-dependencies=\"[test.results]\"\n          :data-index=\"index\"\n        >\n          <AuditTest\n            :key=\"test.id\"\n            :test=\"test\"\n            :form-data-item=\"formData[test.id]\"\n            @update-field=\"(value) => updateField({ ...value, id: test.id })\"\n          />\n        </DynamicScrollerItem>\n      </template>\n    </DynamicScroller>\n    <template #fallback>\n      <Spinner class=\"mx-auto w-20\" />\n    </template>\n  </ClientOnly>\n  <Dialog\n    v-model:visible=\"isSelectReportTypeModalVisible\"\n    modal\n    dismissable-mask\n  >\n    <LazyAuditSelectReportTypeModalContent\n      v-if=\"isSelectReportTypeModalVisible\"\n      :no-axe=\"!Object.keys(result.results).length\"\n    />\n  </Dialog>\n</template>\n","<script lang=\"ts\" setup>\nimport type { Database } from 'types/supabase'\nimport type { ScreenSize } from '~/data/screenSizes'\nimport { availableScreenSizes } from '~/data/screenSizes'\n\nconst supabase = useSupabaseClient<Database>()\nconst route = useRoute()\nconst router = useRouter()\nconst auditId = route.params.id\nconst resultId = ref(Number(route.query.resultId))\nconst isReloadRequired = ref(false)\n\nconst { data: axeResults } = await supabase\n  .from('axe')\n  .select('*')\n  .eq('audit_id', auditId)\n\nconst { data: auditInfo } = await supabase\n  .from('audits')\n  .select('*, projects(name), profiles(username, full_name)')\n  .eq('id', auditId)\n  .single()\n\nif (!axeResults || !auditInfo) {\n  throw createError({\n    statusCode: 404,\n    statusMessage: 'Audit not found',\n    fatal: true,\n  })\n}\n\nconst urlAndSelectorOptions = axeResults?.map((result) => {\n  const screenSize = availableScreenSizes.find(\n    (availableScreenSize) =>\n      availableScreenSize.viewport.toString() === result.size?.toString()\n  )\n  return {\n    id: result.id,\n    name: `${result.results?.url} - ${result.selector ?? ''}`,\n    screenSize,\n  }\n})\n\nif (!resultId.value) {\n  resultId.value = urlAndSelectorOptions[0]?.id\n}\n\nconst screenSizeOptions = urlAndSelectorOptions.reduce((acc, result) => {\n  if (!acc.find((option) => option.name === result.screenSize?.name)) {\n    if (result.screenSize) {\n      acc.push(result.screenSize)\n    }\n  }\n  return acc\n}, [] as ScreenSize[])\n\nconst screenSize = ref(\n  urlAndSelectorOptions.find((option) => resultId.value === option.id)\n    ?.screenSize || screenSizeOptions[0]\n)\n\nconst urlAndSelectorOptionsForSelectedScreenSize = computed(() =>\n  urlAndSelectorOptions.filter(\n    (option) => option.screenSize?.name === screenSize.value.name\n  )\n)\n\nconst changeScreenSize = (value: ScreenSize) => {\n  const previousResultName =\n    urlAndSelectorOptionsForSelectedScreenSize.value.find(\n      (value) => value.id === resultId.value\n    )?.name\n\n  screenSize.value = value\n  resultId.value =\n    urlAndSelectorOptionsForSelectedScreenSize.value.find(\n      (option) => option.name === previousResultName\n    )?.id || resultId.value\n}\n\nconst auditResult = computed(() =>\n  axeResults.find((result) => result.id === resultId.value)\n)\n\nwatch(\n  resultId,\n  () => {\n    router.replace({\n      query: {\n        resultId: resultId.value,\n      },\n    })\n  },\n  { immediate: true }\n)\n</script>\n\n<template>\n  <div class=\"mb-24 space-y-6\">\n    <template v-if=\"auditInfo && auditInfo.config\">\n      <div\n        class=\"flex flex-col-reverse gap-x-2 gap-y-4 md:flex-row md:justify-between\"\n      >\n        <h1 class=\"font-medium\">Audit: {{ auditInfo.config.title }}</h1>\n        <div>\n          <NuxtLink\n            :to=\"`/audit/new?baseAuditId=${auditId}`\"\n            class=\"p-button p-button-outlined\"\n          >\n            Repeat audit\n          </NuxtLink>\n        </div>\n      </div>\n      <Accordion>\n        <AccordionTab header=\"Audit Information\">\n          <ul class=\"space-y-1\">\n            <li><span class=\"font-bold\">Id: </span>#{{ auditId }}</li>\n            <li>\n              <span class=\"font-bold\">Project: </span>\n              {{ auditInfo.projects?.name }}\n            </li>\n            <li v-if=\"auditInfo.config?.description\">\n              <span class=\"font-bold\">Description: </span>\n              {{ auditInfo.config.description }}\n            </li>\n            <li>\n              <span class=\"font-bold\">Created at: </span>\n              <time>\n                {{ new Date(auditInfo.created_at).toLocaleDateString('pl-PL') }}\n              </time>\n            </li>\n            <li>\n              <span class=\"font-bold\">Auditor: </span>\n              {{ auditInfo.profiles?.full_name }} ({{\n                auditInfo.profiles?.username\n              }})\n            </li>\n            <li>\n              <span class=\"font-bold\">Status: </span>{{ auditInfo.status }}\n            </li>\n            <li v-if=\"auditInfo.config?.basicAuth?.username?.length\">\n              <span class=\"font-bold\">Basic Authentication:</span>\n              <ul class=\"list-disc pl-8\">\n                <li\n                  v-for=\"(tTValue, tTKey) in auditInfo.config.basicAuth\"\n                  :key=\"tTKey\"\n                >\n                  <span class=\"font-bold first-letter:uppercase\">\n                    {{ tTKey }}:\n                  </span>\n                  &nbsp;\n                  {{ tTValue }}\n                </li>\n              </ul>\n            </li>\n            <li v-if=\"auditInfo.config.pages.length\">\n              <span class=\"font-bold\">Pages:</span>\n              <ul class=\"list-disc space-y-2 pl-8\">\n                <li\n                  v-for=\"(page, index) in auditInfo.config.pages\"\n                  :key=\"index\"\n                >\n                  <NuxtLink\n                    :to=\"page.url\"\n                    target=\"_blank\"\n                  >\n                    {{ page.url }}\n                  </NuxtLink>\n                  <template v-if=\"page.selector?.length\">\n                    - selector:\n                    <code class=\"break-words rounded-md bg-gray-100 px-2 py-1\">\n                      {{ page.selector }}\n                    </code>\n                  </template>\n                </li>\n              </ul>\n            </li>\n            <li>\n              <span class=\"font-bold\">Screen sizes:</span>\n              <ul class=\"list-disc pl-8\">\n                <li\n                  v-for=\"(screenSize, index) in screenSizeOptions\"\n                  :key=\"index\"\n                >\n                  {{ screenSize?.name }} [{{ screenSize?.viewport[0] }} x\n                  {{ screenSize?.viewport[1] }}]\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </AccordionTab>\n      </Accordion>\n      <div class=\"grid grid-cols-1 gap-x-6 gap-y-4 md:grid-cols-[2fr_1fr]\">\n        <div v-if=\"!auditInfo.config.noAxe\">\n          <label\n            for=\"url-selector\"\n            class=\"mb-2 block font-medium\"\n          >\n            Url and selector\n          </label>\n          <Dropdown\n            v-model=\"resultId\"\n            class=\"w-full\"\n            :options=\"urlAndSelectorOptionsForSelectedScreenSize\"\n            option-label=\"name\"\n            option-value=\"id\"\n            input-id=\"url-selector\"\n            @change=\"isReloadRequired = true\"\n          />\n        </div>\n        <div :class=\"{ 'col-span-2': auditInfo.config.noAxe }\">\n          <label\n            for=\"screen-size\"\n            class=\"mb-2 block font-medium\"\n          >\n            Screen size / Device\n          </label>\n          <Dropdown\n            :model-value=\"screenSize\"\n            class=\"w-full\"\n            option-label=\"name\"\n            :options=\"screenSizeOptions\"\n            input-id=\"screen-size\"\n            @update:model-value=\"changeScreenSize\"\n            @change=\"isReloadRequired = true\"\n          />\n        </div>\n      </div>\n      <Transition\n        enter-active-class=\"transition duration-300 ease-out\"\n        enter-from-class=\"transform scale-95 opacity-0\"\n        enter-to-class=\"transform scale-100 opacity-100\"\n        leave-active-class=\"transition duration-75 ease-in\"\n        leave-from-class=\"transform scale-100 opacity-100\"\n        leave-to-class=\"transform scale-95 opacity-0\"\n      >\n        <InlineMessage\n          v-show=\"isReloadRequired\"\n          severity=\"warn\"\n          class=\"flex w-full items-center !justify-start\"\n        >\n          Refresh the page to make sure the correct audit data is displayed.\n        </InlineMessage>\n      </Transition>\n      <AuditResults\n        v-if=\"auditResult\"\n        :result=\"auditResult\"\n      />\n    </template>\n  </div>\n</template>\n"],"names":["selectedItems","_withAsyncContext","screenSize","_a","value","_b"],"mappings":"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"}