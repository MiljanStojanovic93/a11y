{"version":3,"file":"_id_-69f1d5f2.js","sources":["../../../../node_modules/.pnpm/nuxt@3.7.0_@parcel+watcher@2.3.0_@types+node@18.17.14_eslint@8.48.0_optionator@0.9.3_rollup@3_xzmsy53qnpxagnlftxpwxubjfm/node_modules/nuxt/dist/app/composables/url.js","../../../../components/AuditReportSharableLink.vue","../../../../components/TrustedTestInfo.vue","../../../../components/AuditAutomaticTestResultIssue.vue","../../../../node_modules/@unhead/vue/dist/shared/vue.f49591ad.mjs","../../../../node_modules/@unhead/vue/dist/shared/vue.8fc199ce.mjs","../../../../node_modules/@unhead/vue/dist/index.mjs","../../../../utils/get-audit-report.ts","../../../../pages/audit/report/[id].vue"],"sourcesContent":["import { getRequestURL } from \"h3\";\nimport { joinURL } from \"ufo\";\nimport { useRequestEvent } from \"./ssr.js\";\nimport { useRuntimeConfig } from \"#app\";\nexport function useRequestURL() {\n  if (import.meta.server) {\n    const url = getRequestURL(useRequestEvent());\n    url.pathname = joinURL(useRuntimeConfig().app.baseURL, url.pathname);\n    return url;\n  }\n  return new URL(window.location.href);\n}\n","<script lang=\"ts\" setup>\nconst { origin, pathname, searchParams } = useRequestURL()\nconst sharableLink =\n  origin +\n  pathname +\n  '?type=' +\n  (searchParams.get('type') || 'review') +\n  '&share=true'\nconst { copy, copied, isSupported } = useClipboard({\n  source: sharableLink,\n})\n</script>\n\n<template>\n  <div class=\"print:hidden\">\n    <h2 class=\"text-blue-900\">Share report</h2>\n    <div\n      class=\"flex justify-between rounded-md border border-blue-900 bg-white\"\n    >\n      <span class=\"break-all px-4 py-2\">\n        {{ sharableLink }}\n      </span>\n      <div>\n        <button\n          v-if=\"isSupported\"\n          class=\"h-full min-w-[80px] flex-1 cursor-pointer bg-blue-900 text-white\"\n          @click=\"copy()\"\n        >\n          <span v-if=\"!copied\">Copy</span>\n          <span v-else>Copied!</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n","<script lang=\"ts\" setup>\nimport type { AuditInfo } from 'types/audit'\n\ndefineProps<{\n  info: AuditInfo\n  displayedInfoKeys: Partial<keyof AuditInfo>[]\n  status?: string\n}>()\n\nconst collapsibleItemsState = ref<Record<string, { isOpen: boolean }>>({\n  Note: { isOpen: false },\n  Techniques: { isOpen: false },\n  'Disability Impact': { isOpen: false },\n})\n</script>\n\n<template>\n  <div\n    v-if=\"displayedInfoKeys.includes('Test Name') || status\"\n    class=\"mb-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\"\n  >\n    <h3\n      v-if=\"displayedInfoKeys.includes('Test Name')\"\n      class=\"text-xl font-semibold\"\n    >\n      {{ info['Test Name'] }}\n    </h3>\n    <div\n      v-if=\"status\"\n      class=\"-order-1 sm:order-1\"\n    >\n      <Tag\n        class=\"!text-base sm:min-w-[200px] sm:!py-2\"\n        :value=\"status\"\n        rounded\n        :severity=\"\n          status === 'Passed'\n            ? 'success'\n            : status === 'Failed'\n            ? 'danger'\n            : 'primary'\n        \"\n        :class=\"{ '!bg-gray-600': status === 'Not applicable' }\"\n      />\n    </div>\n  </div>\n  <ul class=\"space-y-1\">\n    <li\n      v-for=\"(tTValue, tTKey) in info\"\n      :key=\"tTKey\"\n    >\n      <Component\n        :is=\"tTKey in collapsibleItemsState ? 'details' : 'div'\"\n        v-if=\"\n          displayedInfoKeys.includes(tTKey) && tTKey !== 'Test Name' && tTValue\n        \"\n      >\n        <summary\n          v-if=\"tTKey in collapsibleItemsState\"\n          class=\"flex w-full cursor-pointer items-center gap-2 bg-white p-0 text-base font-bold\"\n          :open=\"collapsibleItemsState[tTKey].isOpen\"\n          @click=\"\n            collapsibleItemsState[tTKey].isOpen =\n              !collapsibleItemsState[tTKey].isOpen\n          \"\n        >\n          {{ tTKey }}\n          <i\n            class=\"pi pi-chevron-down pt-0.5 !text-sm transition-transform\"\n            :class=\"{ 'rotate-180': collapsibleItemsState[tTKey].isOpen }\"\n            aria-hidden=\"true\"\n          />\n        </summary>\n        <span\n          v-else\n          class=\"inline-block font-bold\"\n        >\n          {{ tTKey }}:&nbsp;\n        </span>\n        <span\n          v-show=\"\n            !(tTKey in collapsibleItemsState) ||\n            collapsibleItemsState[tTKey].isOpen\n          \"\n        >\n          <template v-if=\"Array.isArray(tTValue)\">\n            <ul\n              v-if=\"tTKey === 'WCAG SC'\"\n              class=\"inline-flex gap-2\"\n            >\n              <li\n                v-for=\"(tTValueItem, index) in tTValue\"\n                :key=\"index\"\n              >\n                <Tag\n                  :value=\"tTValueItem\"\n                  severity=\"success\"\n                  rounded\n                  class=\"tracking-wider [&>.p-tag-value]:leading-4\"\n                />\n              </li>\n            </ul>\n            <ol\n              v-else\n              class=\"mt-1 list-decimal space-y-1 pl-8\"\n            >\n              <li\n                v-for=\"(tTValueItem, index) in tTValue\"\n                :key=\"index\"\n              >\n                <NuxtLink\n                  v-if=\"tTKey === 'URLs'\"\n                  target=\"_blank\"\n                  :to=\"tTValueItem\"\n                >\n                  {{ tTValueItem }}\n                </NuxtLink>\n                <template v-else>\n                  {{ tTValueItem }}\n                </template>\n              </li>\n            </ol>\n          </template>\n          <template v-else-if=\"typeof tTValue === 'string'\">\n            <Tag\n              v-if=\"['Level'].includes(tTKey)\"\n              :value=\"tTValue\"\n              severity=\"info\"\n              rounded\n              class=\"tracking-wider [&>.p-tag-value]:leading-4\"\n            />\n            <span\n              v-else\n              :class=\"{ 'mt-1 block': tTKey in collapsibleItemsState }\"\n            >\n              {{ tTValue }}\n            </span>\n          </template>\n        </span>\n      </Component>\n    </li>\n  </ul>\n</template>\n","<script lang=\"ts\" setup>\nimport type { AutomaticTestGroupedNodes } from 'types/audit'\n\nconst props = defineProps<AutomaticTestGroupedNodes>()\n\nconst isCollapsible = computed(() => props.groupedNodes[0]?.pageName)\n</script>\n\n<template>\n  <li class=\"rounded-md border border-red-600 p-6\">\n    <h5 class=\"text-lg font-medium text-red-800\">\n      {{ id }}\n    </h5>\n    <p class=\"font-medium\">{{ description }}.</p>\n    <p>\n      <span class=\"font-medium\">Impact: </span>\n      {{ impact || 'n/a' }}\n      <span\n        v-if=\"impact\"\n        class=\"inline-block h-3 w-3 rounded-full border border-gray-700\"\n        :class=\"{\n          'bg-red-700': impact === 'critical',\n          'bg-red-500': impact === 'serious',\n          'bg-red-300': impact === 'moderate',\n          'bg-red-100': impact === 'minor',\n        }\"\n      />\n    </p>\n    <Component\n      :is=\"isCollapsible ? 'Accordion' : 'div'\"\n      :multiple=\"true\"\n      class=\"break-inside-avoid\"\n      :class=\"{ 'mt-6': isCollapsible }\"\n    >\n      <Component\n        :is=\"isCollapsible ? 'AccordionTab' : 'div'\"\n        v-for=\"({ pageName, nodes }, index) in groupedNodes\"\n        :key=\"index\"\n      >\n        <template #header>\n          <span>\n            <span class=\"break-all\">\n              {{ pageName }}\n            </span>\n            <span class=\"text-red-800\"> ({{ nodes.length }})</span>\n          </span>\n        </template>\n        <ol\n          title=\"HTML nodes\"\n          class=\"divide-y divide-red-600\"\n        >\n          <li\n            v-for=\"(node, nodeIndex) in nodes\"\n            :key=\"nodeIndex\"\n            class=\"grid break-inside-avoid grid-cols-[34px_minmax(0,1fr)] py-6 pr-1 first-of-type:pt-3 last-of-type:pb-0\"\n          >\n            <span\n              class=\"font-medium text-red-800\"\n              aria-hidden=\"true\"\n            >\n              {{ nodeIndex + 1 }}.\n            </span>\n            <div>\n              <div class=\"mb-1\">\n                <span class=\"font-medium\">How to fix: </span>\n                {{ node.failureSummary }}.\n              </div>\n              <div class=\"mb-2 space-x-1 space-y-1\">\n                <span class=\"font-medium\">HTML target:</span>\n                <code class=\"break-words rounded-md bg-gray-100 px-2 py-1\">\n                  {{ node.target.join(', ') }}\n                </code>\n              </div>\n              <div class=\"rounded-md bg-gray-100 p-4\">\n                <code class=\"break-words\">\n                  {{ node.html }}\n                </code>\n              </div>\n            </div>\n          </li>\n        </ol>\n      </Component>\n    </Component>\n  </li>\n</template>\n","import { createServerHead as createServerHead$1, createHead as createHead$1, getActiveHead } from 'unhead';\nimport { version, unref, nextTick, inject } from 'vue';\nimport { defineHeadPlugin } from '@unhead/shared';\n\nconst Vue3 = version[0] === \"3\";\n\nfunction resolveUnref(r) {\n  return typeof r === \"function\" ? r() : unref(r);\n}\nfunction resolveUnrefHeadInput(ref) {\n  if (ref instanceof Promise || ref instanceof Date || ref instanceof RegExp)\n    return ref;\n  const root = resolveUnref(ref);\n  if (!ref || !root)\n    return root;\n  if (Array.isArray(root))\n    return root.map((r) => resolveUnrefHeadInput(r));\n  if (typeof root === \"object\") {\n    const resolved = {};\n    for (const k in root) {\n      if (!Object.prototype.hasOwnProperty.call(root, k)) {\n        continue;\n      }\n      if (k === \"titleTemplate\" || k[0] === \"o\" && k[1] === \"n\") {\n        resolved[k] = unref(root[k]);\n        continue;\n      }\n      resolved[k] = resolveUnrefHeadInput(root[k]);\n    }\n    return resolved;\n  }\n  return root;\n}\n\nconst VueReactivityPlugin = defineHeadPlugin({\n  hooks: {\n    \"entries:resolve\": (ctx) => {\n      for (const entry of ctx.entries)\n        entry.resolvedInput = resolveUnrefHeadInput(entry.input);\n    }\n  }\n});\n\nconst headSymbol = \"usehead\";\nfunction vueInstall(head) {\n  const plugin = {\n    install(app) {\n      if (Vue3) {\n        app.config.globalProperties.$unhead = head;\n        app.config.globalProperties.$head = head;\n        app.provide(headSymbol, head);\n      }\n    }\n  };\n  return plugin.install;\n}\nfunction createServerHead(options = {}) {\n  const head = createServerHead$1(options);\n  head.use(VueReactivityPlugin);\n  head.install = vueInstall(head);\n  return head;\n}\nfunction createHead(options = {}) {\n  options.domDelayFn = options.domDelayFn || ((fn) => nextTick(() => setTimeout(() => fn(), 0)));\n  const head = createHead$1(options);\n  head.use(VueReactivityPlugin);\n  head.install = vueInstall(head);\n  return head;\n}\n\nconst _global = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nconst globalKey = \"__unhead_injection_handler__\";\nfunction setHeadInjectionHandler(handler) {\n  _global[globalKey] = handler;\n}\nfunction injectHead() {\n  if (globalKey in _global) {\n    return _global[globalKey]();\n  }\n  const head = inject(headSymbol);\n  if (!head && process.env.NODE_ENV !== \"production\")\n    console.warn(\"Unhead is missing Vue context, falling back to shared context. This may have unexpected results.\");\n  return head || getActiveHead();\n}\n\nexport { Vue3 as V, createServerHead as a, createHead as c, headSymbol as h, injectHead as i, resolveUnrefHeadInput as r, setHeadInjectionHandler as s };\n","import { ref, watchEffect, watch, getCurrentInstance, onBeforeUnmount, onDeactivated, onActivated } from 'vue';\nimport { i as injectHead, r as resolveUnrefHeadInput } from './vue.f49591ad.mjs';\n\nfunction useHead(input, options = {}) {\n  const head = options.head || injectHead();\n  if (head) {\n    if (!head.ssr)\n      return clientUseHead(head, input, options);\n    return head.push(input, options);\n  }\n}\nfunction clientUseHead(head, input, options = {}) {\n  const deactivated = ref(false);\n  const resolvedInput = ref({});\n  watchEffect(() => {\n    resolvedInput.value = deactivated.value ? {} : resolveUnrefHeadInput(input);\n  });\n  const entry = head.push(resolvedInput.value, options);\n  watch(resolvedInput, (e) => {\n    entry.patch(e);\n  });\n  const vm = getCurrentInstance();\n  if (vm) {\n    onBeforeUnmount(() => {\n      entry.dispose();\n    });\n    onDeactivated(() => {\n      deactivated.value = true;\n    });\n    onActivated(() => {\n      deactivated.value = false;\n    });\n  }\n  return entry;\n}\n\nexport { useHead as u };\n","import { useScript as useScript$1 } from 'unhead';\nexport { CapoPlugin, HashHydrationPlugin, createHeadCore } from 'unhead';\nimport { i as injectHead, h as headSymbol, V as Vue3 } from './shared/vue.f49591ad.mjs';\nexport { c as createHead, a as createServerHead, r as resolveUnrefHeadInput, s as setHeadInjectionHandler } from './shared/vue.f49591ad.mjs';\nimport { composableNames, whitelistSafeInput, unpackMeta } from '@unhead/shared';\nimport { u as useHead } from './shared/vue.8fc199ce.mjs';\nimport { getCurrentInstance, onMounted, isRef, watch, onScopeDispose, ref } from 'vue';\n\nconst coreComposableNames = [\n  \"injectHead\"\n];\nconst unheadVueComposablesImports = {\n  \"@unhead/vue\": [...coreComposableNames, ...composableNames]\n};\n\nfunction useHeadSafe(input, options = {}) {\n  return useHead(input, { ...options, transform: whitelistSafeInput });\n}\n\nfunction registerVueScopeHandlers(script, scope) {\n  if (!scope) {\n    return;\n  }\n  const _registerCb = (key, cb) => {\n    if (!script._cbs[key]) {\n      cb(script.instance);\n      return () => {\n      };\n    }\n    let i = script._cbs[key].push(cb);\n    const destroy = () => {\n      if (i) {\n        script._cbs[key]?.splice(i - 1, 1);\n        i = null;\n      }\n    };\n    onScopeDispose(destroy);\n    return destroy;\n  };\n  script.onLoaded = (cb) => _registerCb(\"loaded\", cb);\n  script.onError = (cb) => _registerCb(\"error\", cb);\n  onScopeDispose(() => {\n    script._triggerAbortController?.abort();\n  });\n}\nfunction useScript(_input, _options) {\n  const input = typeof _input === \"string\" ? { src: _input } : _input;\n  const options = _options || {};\n  const head = options?.head || injectHead();\n  options.head = head;\n  const scope = getCurrentInstance();\n  options.eventContext = scope;\n  if (scope && typeof options.trigger === \"undefined\") {\n    options.trigger = onMounted;\n  } else if (isRef(options.trigger)) {\n    const refTrigger = options.trigger;\n    let off;\n    options.trigger = new Promise((resolve) => {\n      off = watch(refTrigger, (val) => {\n        if (val) {\n          resolve(true);\n        }\n      }, {\n        immediate: true\n      });\n      onScopeDispose(() => resolve(false), true);\n    }).then((val) => {\n      off?.();\n      return val;\n    });\n  }\n  head._scriptStatusWatcher = head._scriptStatusWatcher || head.hooks.hook(\"script:updated\", ({ script: s }) => {\n    s._statusRef.value = s.status;\n  });\n  const script = useScript$1(input, options);\n  script._statusRef = script._statusRef || ref(script.status);\n  registerVueScopeHandlers(script, scope);\n  return new Proxy(script, {\n    get(_, key, a) {\n      return Reflect.get(_, key === \"status\" ? \"_statusRef\" : key, a);\n    }\n  });\n}\n\nfunction useSeoMeta(input, options) {\n  const { title, titleTemplate, ...meta } = input;\n  return useHead({\n    title,\n    titleTemplate,\n    // @ts-expect-error runtime type\n    _flatMeta: meta\n  }, {\n    ...options,\n    transform(t) {\n      const meta2 = unpackMeta({ ...t._flatMeta });\n      delete t._flatMeta;\n      return {\n        // @ts-expect-error runtime type\n        ...t,\n        meta: meta2\n      };\n    }\n  });\n}\n\nfunction useServerHead(input, options = {}) {\n  const head = options.head || injectHead();\n  delete options.head;\n  if (head)\n    return head.push(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerHeadSafe(input, options = {}) {\n  return useHeadSafe(input, { ...options, mode: \"server\" });\n}\n\nfunction useServerSeoMeta(input, options) {\n  return useSeoMeta(input, { ...options, mode: \"server\" });\n}\n\nconst Vue2ProvideUnheadPlugin = (_Vue, head) => {\n  _Vue.mixin({\n    beforeCreate() {\n      const options = this.$options;\n      const origProvide = options.provide;\n      options.provide = function() {\n        let origProvideResult;\n        if (typeof origProvide === \"function\")\n          origProvideResult = origProvide.call(this);\n        else\n          origProvideResult = origProvide || {};\n        return {\n          ...origProvideResult,\n          [headSymbol]: head\n        };\n      };\n    }\n  });\n};\n\nconst VueHeadMixin = {\n  created() {\n    let source = false;\n    if (Vue3) {\n      const instance = getCurrentInstance();\n      if (!instance)\n        return;\n      const options = instance.type;\n      if (!options || !(\"head\" in options))\n        return;\n      source = typeof options.head === \"function\" ? () => options.head.call(instance.proxy) : options.head;\n    } else {\n      const head = this.$options.head;\n      if (head) {\n        source = typeof head === \"function\" ? () => head.call(this) : head;\n      }\n    }\n    source && useHead(source);\n  }\n};\n\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, injectHead, unheadVueComposablesImports, useHead, useHeadSafe, useScript, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta };\n","import type { Axe } from 'types/database'\nimport type {\n  AuditReport,\n  GroupedResult,\n  TestedElementsCount,\n  ManualTestResult,\n  Test,\n} from 'types/audit-report'\nimport type { AuditItem } from 'types/audit'\nimport { getStatus } from '~/utils/get-status'\n\nexport const getAuditReport = (\n  axeResults: Axe[],\n  reportType: string\n): AuditReport => {\n  const auditReport: AuditReport = {\n    categories: {},\n    testedElementsCount: {\n      total: 0,\n      issues: 0,\n      passes: 0,\n    },\n  }\n\n  axeResults.forEach((axeResult) => {\n    let pageName = ''\n    if (axeResult.results.url) {\n      pageName += `URL: ${axeResult.results.url} | `\n    }\n    if (axeResult.selector) {\n      pageName += `Selector: ${axeResult.selector} | `\n    }\n    pageName += `Screen size / Device: ${axeResult.size}`\n\n    const { audit, formData } = useAudit(axeResult)\n\n    audit.value.forEach((auditItem) => {\n      const category = auditItem.info['Test Category']\n      const name = auditItem.info['Test Name']\n      const {\n        manualTestResultsStatus,\n        manualTestIssues,\n        manualTestRecommendedFixes,\n      } = formData.value[auditItem.id]\n      const status = getStatus({\n        automaticTestResultsStatus: auditItem.automaticTestResultsStatus,\n        manualTestResultsStatus,\n        reportType,\n      })\n\n      let relatedTestInAuditReport = auditReport.categories[\n        category\n      ]?.tests.find((test) => test.name === name)\n\n      if (!relatedTestInAuditReport) {\n        relatedTestInAuditReport = {\n          name,\n          pageStatuses: [],\n          testedElementsCount: 0,\n          info: auditItem.info,\n          groupedResults: [],\n        }\n        auditReport.categories[category] = {\n          status: auditReport.categories[category]?.status || 'Not applicable',\n          tests: [\n            ...(auditReport.categories[category]?.tests || []),\n            relatedTestInAuditReport,\n          ],\n        }\n      }\n\n      relatedTestInAuditReport.pageStatuses.push({ pageName, status })\n\n      auditReport.categories[category].status = getUpdatedCategoryStatus(\n        auditReport.categories[category].status,\n        status\n      )\n\n      addAutomaticTestResults(auditItem, relatedTestInAuditReport, pageName)\n      addManualTestResults(\n        manualTestResultsStatus,\n        manualTestIssues,\n        manualTestRecommendedFixes,\n        relatedTestInAuditReport,\n        pageName,\n        auditReport\n      )\n    })\n  })\n\n  addTestedElementsCount(auditReport)\n  moveFailedCategoriesToTop(auditReport)\n\n  return auditReport\n}\n\nconst getUpdatedCategoryStatus = (\n  currentCategoryStatus: string,\n  testStatus: string\n) => {\n  if (\n    /*\n    Statuses have different importance:\n    1. Failed\n    2. Not tested\n    3. Passed\n    4. Not applicable\n    \"Failed\" overwrites all. Not tested overwrites \"Not applicable\" and \"Passed\", and so on.\n    */\n    (testStatus !== 'Not applicable' && currentCategoryStatus !== 'Failed') ||\n    (testStatus === 'Passed' && currentCategoryStatus === 'Not applicable')\n  ) {\n    return testStatus\n  }\n  return currentCategoryStatus\n}\n\nconst addAutomaticTestResults = (\n  auditItem: AuditItem,\n  relatedTestInAuditReport: Test,\n  pageName: string\n) => {\n  auditItem.automaticTestGroupedResults.forEach((group) => {\n    let relatedTestGroupedResults =\n      relatedTestInAuditReport?.groupedResults.find(\n        (statusGroup) => statusGroup.type === group.type\n      )\n\n    if (!relatedTestGroupedResults) {\n      relatedTestGroupedResults = {\n        type: group.type,\n        testedElementsCount: 0,\n        automaticTestResults: [],\n        manualTestResults: [],\n      }\n      relatedTestInAuditReport?.groupedResults.push(relatedTestGroupedResults)\n    }\n\n    group.results.forEach(({ id, description, impact, nodes }) => {\n      let relatedAutomaticTestResult =\n        relatedTestGroupedResults?.automaticTestResults.find(\n          (result) => result.id === id\n        )\n\n      if (!relatedAutomaticTestResult) {\n        relatedAutomaticTestResult = {\n          id,\n          description,\n          impact,\n          groupedNodes: [],\n        }\n        relatedTestGroupedResults?.automaticTestResults.push(\n          relatedAutomaticTestResult\n        )\n      }\n\n      relatedAutomaticTestResult.groupedNodes.push({ pageName, nodes })\n    })\n  })\n}\n\nconst addManualTestResults = (\n  manualTestResultsStatus: string,\n  manualTestIssues: string,\n  manualTestRecommendedFixes: string,\n  relatedTestInAuditReport: Test,\n  pageName: string,\n  auditReport: AuditReport\n) => {\n  let manualTestResultType = 'requires manual tests'\n  if (manualTestResultsStatus === 'Failed') {\n    manualTestResultType = 'issues'\n    auditReport.testedElementsCount.issues++\n  } else if (manualTestResultsStatus === 'Passed') {\n    manualTestResultType = 'passes'\n    auditReport.testedElementsCount.passes++\n  } else if (manualTestResultsStatus === 'Not applicable') {\n    manualTestResultType = 'not applicable'\n  }\n\n  const manualTestResult: ManualTestResult = {\n    pageName,\n    issues: manualTestIssues,\n    recommendedFixes: manualTestRecommendedFixes,\n  }\n\n  const relatedTestGroupedResults =\n    relatedTestInAuditReport.groupedResults.find(\n      ({ type }) => type === manualTestResultType\n    )\n\n  if (relatedTestGroupedResults) {\n    relatedTestGroupedResults.manualTestResults.push(manualTestResult)\n  } else {\n    relatedTestInAuditReport.groupedResults.push({\n      type: manualTestResultType,\n      testedElementsCount: 0,\n      automaticTestResults: [],\n      manualTestResults: [manualTestResult],\n    })\n  }\n}\n\nconst addTestedElementsCount = (auditReport: AuditReport) => {\n  const getResultCount = (group: GroupedResult) =>\n    group.automaticTestResults.reduce(\n      (acc, result) =>\n        acc +\n        result.groupedNodes.reduce((acc, group) => acc + group.nodes.length, 0),\n      0\n    )\n\n  for (const category of Object.values(auditReport.categories)) {\n    for (const test of category.tests) {\n      let testedElementsCount = 0\n\n      for (const group of test.groupedResults) {\n        group.testedElementsCount = getResultCount(group)\n        testedElementsCount += group.testedElementsCount\n\n        if (group.type in auditReport.testedElementsCount) {\n          auditReport.testedElementsCount[\n            group.type as keyof TestedElementsCount\n          ] += group.testedElementsCount\n        }\n      }\n\n      test.testedElementsCount = testedElementsCount\n      auditReport.testedElementsCount.total += testedElementsCount\n    }\n  }\n}\n\nconst moveFailedCategoriesToTop = (auditReport: AuditReport) => {\n  auditReport.categories = Object.entries(auditReport.categories)\n    .sort(([, categoryA], [, categoryB]) => {\n      const hasFailedA = categoryA.status === 'Failed'\n      const hasFailedB = categoryB.status === 'Failed'\n\n      if (hasFailedA && !hasFailedB) {\n        return -1 // Move categoryA to the front\n      } else if (!hasFailedA && hasFailedB) {\n        return 1 // Move categoryB to the front\n      }\n      return 0 // No change in order\n    })\n    .reduce((result, [categoryName, category]) => {\n      result[categoryName] = category\n      return result\n    }, {} as AuditReport['categories'])\n}\n","<script lang=\"ts\" setup>\nimport { useToast } from 'primevue/usetoast'\nimport type { Database } from 'types/supabase'\nimport { getAuditReport } from '~/utils/get-audit-report'\n\nconst supabase = useSupabaseClient<Database>()\nconst route = useRoute()\nconst user = useSupabaseUser()\nconst auditId = route.params.id\nconst isSharableReport = route.query.share === 'true' || !user.value\nconst reportType =\n  typeof route.query.type === 'string' ? route.query.type : 'review'\n\ndefinePageMeta({\n  middleware: [\n    defineNuxtRouteMiddleware(async (middleware) => {\n      const user = useSupabaseUser()\n      if (!user.value) {\n        // As a guest user you can only see completed reports\n        const supabase = useSupabaseClient<Database>()\n        const { data: auditInfo } = await supabase\n          .from('audits')\n          .select('status')\n          .eq('id', middleware.params.id)\n          .single()\n        if (auditInfo?.status === 'draft') {\n          return navigateTo('/login')\n        }\n      }\n\n      if (!user.value || middleware.query.share === 'true') {\n        setPageLayout('blank')\n      }\n    }),\n  ],\n})\n\nconst { data: axeResults } = await supabase\n  .from('axe')\n  .select('*')\n  .eq('audit_id', auditId)\n\nconst { data: auditInfo } = await supabase\n  .from('audits')\n  .select('*, projects(name), profiles(username, full_name)')\n  .eq('id', auditId)\n  .single()\n\nif (!axeResults || !auditInfo) {\n  throw createError({\n    statusCode: 404,\n    statusMessage: 'Audit not found',\n    fatal: true,\n  })\n}\n\nuseHead({\n  title: `Snowdog Accessibility Audit Report - ${auditInfo.config.title}`,\n  titleTemplate: '%s',\n})\n\nconst auditReport = getAuditReport(axeResults, reportType)\nconst isAuditCompleted = ref(auditInfo.status === 'completed')\nconst comment = ref(auditInfo.comment)\n\nconst toast = useToast()\nconst isCompletingReport = ref(false)\nconst completeReport = async () => {\n  isCompletingReport.value = true\n  const supabase = useSupabaseClient<Database>()\n\n  try {\n    const { data, error } = await supabase\n      .from('audits')\n      .update({\n        status: 'completed',\n        report_type: reportType,\n        comment: comment.value,\n      })\n      .eq('id', auditId)\n      .select()\n    if (error) {\n      throw new Error(error?.message)\n    }\n    if (data?.length === 1) {\n      isAuditCompleted.value = true\n      toast.add({\n        severity: 'success',\n        summary: 'Successfully completed report.',\n        life: 3000,\n      })\n    }\n  } catch (error) {\n    toast.add({\n      severity: 'error',\n      summary: (error as Error).message || 'Failed to save data.',\n      life: 3000,\n    })\n  } finally {\n    isCompletingReport.value = false\n  }\n}\n</script>\n\n<template>\n  <div>\n    <div\n      v-if=\"auditInfo && auditReport\"\n      class=\"space-y-6\"\n      :class=\"{ 'mb-24': !isAuditCompleted }\"\n    >\n      <AuditReportSharableLink v-if=\"isAuditCompleted && !isSharableReport\" />\n      <NuxtLink\n        v-if=\"!isSharableReport\"\n        :to=\"`/audit/new?baseAuditId=${auditId}`\"\n        class=\"p-button p-button-outlined print:!hidden\"\n      >\n        Repeat audit\n      </NuxtLink>\n      <Card>\n        <template #content>\n          <SvgoLogo\n            class=\"mx-auto mb-8 w-60\"\n            aria-hidden=\"true\"\n          />\n          <div class=\"mb-16 space-y-4 text-center\">\n            <Tag\n              v-if=\"!isAuditCompleted\"\n              :value=\"`${reportType} report preview`\"\n              class=\"!px-16 !text-xl !font-normal\"\n              severity=\"info\"\n              rounded\n            />\n            <h1 class=\"font-medium\">\n              Accessibility Audit Report \"{{ auditInfo.config.title }}\"\n            </h1>\n            <p v-if=\"auditInfo.config.description\">\n              {{ auditInfo.config.description }}\n            </p>\n            <p>\n              Created by {{ auditInfo.profiles?.full_name }} in \"{{\n                auditInfo.projects?.name\n              }}\" project on\n              <time>\n                {{\n                  new Date(auditInfo.created_at).toLocaleDateString('pl-PL')\n                }} </time\n              >.\n            </p>\n          </div>\n          <div\n            class=\"mx-auto grid max-w-4xl grid-cols-1 gap-x-10 gap-y-6 md:grid-cols-[1fr_240px]\"\n          >\n            <div class=\"flex flex-col justify-center\">\n              <template v-if=\"auditInfo.config.pages.length\">\n                <h2 class=\"text-lg font-medium\">Pages:</h2>\n                <ul class=\"mb-4 list-disc space-y-2 pl-8\">\n                  <li\n                    v-for=\"(page, index) in auditInfo.config.pages\"\n                    :key=\"index\"\n                  >\n                    <NuxtLink\n                      :to=\"page.url\"\n                      target=\"_blank\"\n                      class=\"break-all\"\n                    >\n                      {{ page.url }}\n                    </NuxtLink>\n                    <template v-if=\"page.selector?.length\">\n                      - selector:\n                      <code\n                        class=\"break-words rounded-md bg-gray-100 px-2 py-1\"\n                      >\n                        {{ page.selector }}\n                      </code>\n                    </template>\n                  </li>\n                </ul>\n              </template>\n              <h2 class=\"text-lg font-medium\">Screen sizes / Devices:</h2>\n              <ul class=\"list-disc pl-8\">\n                <li\n                  v-for=\"(viewport, index) in auditInfo.config.viewports\"\n                  :key=\"index\"\n                >\n                  {{ viewport }}\n                </li>\n              </ul>\n            </div>\n            <AuditReportIssuesCount\n              :count=\"auditReport.testedElementsCount.issues\"\n            />\n            <div\n              v-if=\"isAuditCompleted && comment.length\"\n              class=\"md:col-span-2\"\n            >\n              <h2 class=\"mb-2 text-lg font-medium\">Auditor comment:</h2>\n              <p class=\"whitespace-pre-line\">{{ comment }}</p>\n            </div>\n            <div\n              v-else-if=\"!isAuditCompleted\"\n              class=\"md:col-span-2\"\n            >\n              <label\n                for=\"auditor-comment\"\n                class=\"mb-2 block text-lg font-medium\"\n              >\n                Auditor comment:\n              </label>\n              <Textarea\n                id=\"auditor-comment\"\n                v-model=\"comment\"\n                class=\"w-full\"\n                rows=\"10\"\n              />\n            </div>\n          </div>\n          <div\n            v-if=\"!isAuditCompleted\"\n            class=\"fixed bottom-0 right-0 z-20 w-full border-t bg-white shadow-[0_-1px_6px_0_rgba(0,0,0,0.1)] print:hidden md:border-none md:bg-transparent md:shadow-none\"\n          >\n            <div\n              class=\"flex w-full justify-end space-x-4 p-4 xl:container xl:mx-auto\"\n            >\n              <NuxtLink\n                :to=\"`/audit/${auditId}`\"\n                class=\"p-button p-button-lg p-button-outlined w-full shrink justify-center md:w-[240px]\"\n              >\n                Edit audit\n              </NuxtLink>\n              <Button\n                :disabled=\"isCompletingReport\"\n                class=\"p-button-lg w-full shrink justify-center md:w-[240px]\"\n                @click=\"completeReport\"\n              >\n                Complete report\n              </Button>\n            </div>\n          </div>\n        </template>\n      </Card>\n      <Card\n        v-for=\"(categoryData, categoryName) in auditReport.categories\"\n        :key=\"categoryName\"\n      >\n        <template #content>\n          <AuditReportCategoryTests\n            :name=\"categoryName\"\n            :tests=\"categoryData.tests\"\n            :status=\"categoryData.status\"\n          />\n        </template>\n      </Card>\n    </div>\n  </div>\n</template>\n"],"names":["ref","acc","group","_withAsyncContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,SAAS,gBAAgB;AACN;AACtB,UAAM,MAAM,cAAc,gBAAe,CAAE;AAC3C,QAAI,WAAW,QAAQ,iBAAA,EAAmB,IAAI,SAAS,IAAI,QAAQ;AACnE,WAAO;AAAA,EACR;AAEH;;;;;ACVA,UAAM,EAAE,QAAQ,UAAU,iBAAiB,cAAc;AACnD,UAAA,eACJ,SACA,WACA,YACC,aAAa,IAAI,MAAM,KAAK,YAC7B;AACF,UAAM,EAAE,MAAM,QAAQ,YAAA,IAAgB,aAAa;AAAA,MACjD,QAAQ;AAAA,IAAA,CACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDD,UAAM,wBAAwB,IAAyC;AAAA,MACrE,MAAM,EAAE,QAAQ,MAAM;AAAA,MACtB,YAAY,EAAE,QAAQ,MAAM;AAAA,MAC5B,qBAAqB,EAAE,QAAQ,MAAM;AAAA,IAAA,CACtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVD,UAAM,QAAQ;AAEd,UAAM,gBAAgB,SAAS,MAAM;;AAAA,yBAAM,aAAa,CAAC,MAApB,mBAAuB;AAAA,KAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDvD,QAAQ,CAAC,MAAM;AAE5B,SAAS,aAAa,GAAG;AACvB,SAAO,OAAO,MAAM,aAAa,EAAC,IAAK,MAAM,CAAC;AAChD;AACA,SAAS,sBAAsBA,MAAK;AAClC,MAAIA,gBAAe,WAAWA,gBAAe,QAAQA,gBAAe;AAClE,WAAOA;AACT,QAAM,OAAO,aAAaA,IAAG;AAC7B,MAAI,CAACA,QAAO,CAAC;AACX,WAAO;AACT,MAAI,MAAM,QAAQ,IAAI;AACpB,WAAO,KAAK,IAAI,CAAC,MAAM,sBAAsB,CAAC,CAAC;AACjD,MAAI,OAAO,SAAS,UAAU;AAC5B,UAAM,WAAW,CAAA;AACjB,eAAW,KAAK,MAAM;AACpB,UAAI,CAAC,OAAO,UAAU,eAAe,KAAK,MAAM,CAAC,GAAG;AAClD;AAAA,MACD;AACD,UAAI,MAAM,mBAAmB,EAAE,CAAC,MAAM,OAAO,EAAE,CAAC,MAAM,KAAK;AACzD,iBAAS,CAAC,IAAI,MAAM,KAAK,CAAC,CAAC;AAC3B;AAAA,MACD;AACD,eAAS,CAAC,IAAI,sBAAsB,KAAK,CAAC,CAAC;AAAA,IAC5C;AACD,WAAO;AAAA,EACR;AACD,SAAO;AACT;AAE4B,iBAAiB;AAAA,EAC3C,OAAO;AAAA,IACL,mBAAmB,CAAC,QAAQ;AAC1B,iBAAW,SAAS,IAAI;AACtB,cAAM,gBAAgB,sBAAsB,MAAM,KAAK;AAAA,IAC1D;AAAA,EACF;AACH,CAAC;AAED,MAAM,aAAa;AA2BnB,MAAM,UAAU,OAAO,eAAe,cAAc,aAAsD,OAAO,WAAW,cAAc,SAAS,OAAO,SAAS,cAAc,OAAO,CAAA;AACxL,MAAM,YAAY;AAIlB,SAAS,aAAa;AACpB,MAAI,aAAa,SAAS;AACxB,WAAO,QAAQ,SAAS;EACzB;AACD,QAAM,OAAO,OAAO,UAAU;AAC9B,MAAI,CAAC,QAAQ,QAAQ,IAAI,aAAa;AACpC,YAAQ,KAAK,kGAAkG;AACjH,SAAO,QAAQ;AACjB;AChFA,SAAS,QAAQ,OAAO,UAAU,IAAI;AACpC,QAAM,OAAO,QAAQ,QAAQ,WAAU;AACvC,MAAI,MAAM;AACR,QAAI,CAAC,KAAK;AACR,aAAO,cAAc,MAAM,OAAO,OAAO;AAC3C,WAAO,KAAK,KAAK,OAAO,OAAO;AAAA,EAChC;AACH;AACA,SAAS,cAAc,MAAM,OAAO,UAAU,CAAA,GAAI;AAChD,QAAM,cAAc,IAAI,KAAK;AAC7B,QAAM,gBAAgB,IAAI,CAAA,CAAE;AAC5B,cAAY,MAAM;AAChB,kBAAc,QAAQ,YAAY,QAAQ,CAAA,IAAK,sBAAsB,KAAK;AAAA,EAC9E,CAAG;AACD,QAAM,QAAQ,KAAK,KAAK,cAAc,OAAO,OAAO;AACpD,QAAM,eAAe,CAAC,MAAM;AAC1B,UAAM,MAAM,CAAC;AAAA,EACjB,CAAG;AACU,qBAAqB;AAYhC,SAAO;AACT;AC1BA,MAAM,sBAAsB;AAAA,EAC1B;AACF;AAAA,CACoC;AAAA,EAClC,eAAe,CAAC,GAAG,qBAAqB,GAAG,eAAe;AAC5D;ACFa,MAAA,iBAAiB,CAC5B,YACA,eACgB;AAChB,QAAM,cAA2B;AAAA,IAC/B,YAAY,CAAC;AAAA,IACb,qBAAqB;AAAA,MACnB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,IACV;AAAA,EAAA;AAGS,aAAA,QAAQ,CAAC,cAAc;AAChC,QAAI,WAAW;AACX,QAAA,UAAU,QAAQ,KAAK;AACb,kBAAA,QAAQ,UAAU,QAAQ,GAAG;AAAA,IAC3C;AACA,QAAI,UAAU,UAAU;AACV,kBAAA,aAAa,UAAU,QAAQ;AAAA,IAC7C;AACY,gBAAA,yBAAyB,UAAU,IAAI;AAEnD,UAAM,EAAE,OAAO,SAAS,IAAI,SAAS,SAAS;AAExC,UAAA,MAAM,QAAQ,CAAC,cAAc;;AAC3B,YAAA,WAAW,UAAU,KAAK,eAAe;AACzC,YAAA,OAAO,UAAU,KAAK,WAAW;AACjC,YAAA;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,MACE,IAAA,SAAS,MAAM,UAAU,EAAE;AAC/B,YAAM,SAAS,UAAU;AAAA,QACvB,4BAA4B,UAAU;AAAA,QACtC;AAAA,QACA;AAAA,MAAA,CACD;AAEG,UAAA,4BAA2B,iBAAY,WACzC,QACF,MAF+B,mBAE5B,MAAM,KAAK,CAAC,SAAS,KAAK,SAAS;AAEtC,UAAI,CAAC,0BAA0B;AACF,mCAAA;AAAA,UACzB;AAAA,UACA,cAAc,CAAC;AAAA,UACf,qBAAqB;AAAA,UACrB,MAAM,UAAU;AAAA,UAChB,gBAAgB,CAAC;AAAA,QAAA;AAEP,oBAAA,WAAW,QAAQ,IAAI;AAAA,UACjC,UAAQ,iBAAY,WAAW,QAAQ,MAA/B,mBAAkC,WAAU;AAAA,UACpD,OAAO;AAAA,YACL,KAAI,iBAAY,WAAW,QAAQ,MAA/B,mBAAkC,UAAS,CAAC;AAAA,YAChD;AAAA,UACF;AAAA,QAAA;AAAA,MAEJ;AAEA,+BAAyB,aAAa,KAAK,EAAE,UAAU,OAAQ,CAAA;AAEnD,kBAAA,WAAW,QAAQ,EAAE,SAAS;AAAA,QACxC,YAAY,WAAW,QAAQ,EAAE;AAAA,QACjC;AAAA,MAAA;AAGsB,8BAAA,WAAW,0BAA0B,QAAQ;AACrE;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAAA,IACF,CACD;AAAA,EAAA,CACF;AAED,yBAAuB,WAAW;AAClC,4BAA0B,WAAW;AAE9B,SAAA;AACT;AAEA,MAAM,2BAA2B,CAC/B,uBACA,eACG;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASG,eAAe,oBAAoB,0BAA0B,YAC7D,eAAe,YAAY,0BAA0B;AAAA,IACtD;AACO,WAAA;AAAA,EACT;AACO,SAAA;AACT;AAEA,MAAM,0BAA0B,CAC9B,WACA,0BACA,aACG;AACO,YAAA,4BAA4B,QAAQ,CAAC,UAAU;AACnD,QAAA,4BACF,qEAA0B,eAAe;AAAA,MACvC,CAAC,gBAAgB,YAAY,SAAS,MAAM;AAAA;AAGhD,QAAI,CAAC,2BAA2B;AACF,kCAAA;AAAA,QAC1B,MAAM,MAAM;AAAA,QACZ,qBAAqB;AAAA,QACrB,sBAAsB,CAAC;AAAA,QACvB,mBAAmB,CAAC;AAAA,MAAA;AAEI,2EAAA,eAAe,KAAK;AAAA,IAChD;AAEM,UAAA,QAAQ,QAAQ,CAAC,EAAE,IAAI,aAAa,QAAQ,YAAY;AACxD,UAAA,6BACF,uEAA2B,qBAAqB;AAAA,QAC9C,CAAC,WAAW,OAAO,OAAO;AAAA;AAG9B,UAAI,CAAC,4BAA4B;AACF,qCAAA;AAAA,UAC3B;AAAA,UACA;AAAA,UACA;AAAA,UACA,cAAc,CAAC;AAAA,QAAA;AAEjB,+EAA2B,qBAAqB;AAAA,UAC9C;AAAA;AAAA,MAEJ;AAEA,iCAA2B,aAAa,KAAK,EAAE,UAAU,MAAO,CAAA;AAAA,IAAA,CACjE;AAAA,EAAA,CACF;AACH;AAEA,MAAM,uBAAuB,CAC3B,yBACA,kBACA,4BACA,0BACA,UACA,gBACG;AACH,MAAI,uBAAuB;AAC3B,MAAI,4BAA4B,UAAU;AACjB,2BAAA;AACvB,gBAAY,oBAAoB;AAAA,EAAA,WACvB,4BAA4B,UAAU;AACxB,2BAAA;AACvB,gBAAY,oBAAoB;AAAA,EAAA,WACvB,4BAA4B,kBAAkB;AAChC,2BAAA;AAAA,EACzB;AAEA,QAAM,mBAAqC;AAAA,IACzC;AAAA,IACA,QAAQ;AAAA,IACR,kBAAkB;AAAA,EAAA;AAGd,QAAA,4BACJ,yBAAyB,eAAe;AAAA,IACtC,CAAC,EAAE,WAAW,SAAS;AAAA,EAAA;AAG3B,MAAI,2BAA2B;AACH,8BAAA,kBAAkB,KAAK,gBAAgB;AAAA,EAAA,OAC5D;AACL,6BAAyB,eAAe,KAAK;AAAA,MAC3C,MAAM;AAAA,MACN,qBAAqB;AAAA,MACrB,sBAAsB,CAAC;AAAA,MACvB,mBAAmB,CAAC,gBAAgB;AAAA,IAAA,CACrC;AAAA,EACH;AACF;AAEA,MAAM,yBAAyB,CAAC,gBAA6B;AAC3D,QAAM,iBAAiB,CAAC,UACtB,MAAM,qBAAqB;AAAA,IACzB,CAAC,KAAK,WACJ,MACA,OAAO,aAAa,OAAO,CAACC,MAAKC,WAAUD,OAAMC,OAAM,MAAM,QAAQ,CAAC;AAAA,IACxE;AAAA,EAAA;AAGJ,aAAW,YAAY,OAAO,OAAO,YAAY,UAAU,GAAG;AACjD,eAAA,QAAQ,SAAS,OAAO;AACjC,UAAI,sBAAsB;AAEf,iBAAA,SAAS,KAAK,gBAAgB;AACjC,cAAA,sBAAsB,eAAe,KAAK;AAChD,+BAAuB,MAAM;AAEzB,YAAA,MAAM,QAAQ,YAAY,qBAAqB;AACjD,sBAAY,oBACV,MAAM,IACR,KAAK,MAAM;AAAA,QACb;AAAA,MACF;AAEA,WAAK,sBAAsB;AAC3B,kBAAY,oBAAoB,SAAS;AAAA,IAC3C;AAAA,EACF;AACF;AAEA,MAAM,4BAA4B,CAAC,gBAA6B;AAC9D,cAAY,aAAa,OAAO,QAAQ,YAAY,UAAU,EAC3D,KAAK,CAAC,CAAG,EAAA,SAAS,GAAG,CAAA,EAAG,SAAS,MAAM;AAChC,UAAA,aAAa,UAAU,WAAW;AAClC,UAAA,aAAa,UAAU,WAAW;AAEpC,QAAA,cAAc,CAAC,YAAY;AACtB,aAAA;AAAA,IAAA,WACE,CAAC,cAAc,YAAY;AAC7B,aAAA;AAAA,IACT;AACO,WAAA;AAAA,EAAA,CACR,EACA,OAAO,CAAC,QAAQ,CAAC,cAAc,QAAQ,MAAM;AAC5C,WAAO,YAAY,IAAI;AAChB,WAAA;AAAA,EACT,GAAG,CAA+B,CAAA;AACtC;;;;;ACrPA,QAAA;AACA,UAAM,WAAiB;AACvB,UAAM,QAAuB;AACvB,UAAA,OAAA;AACN,UAAM,uBAAyB;AACzB,UAAA,yBACS,MAAA,UAAe,UAAW,CAAA,KAAA;AAE1B,UAAA,aAAA,OAAA,MAAA,MAAA,SAAA,WAAA,MAAA,MAAA,OAAA;AA6Bf,UAAM,EAAE,MAAM,WAAU,KAAI,CAAA,QAAA,SAAA,IAAAC,iBAAA,MACzB,SAAA,KAAa,KAAA,EAAA,OACN,GAAA,EAAA,GAAA,YAAA,OAAA,CAAA,GAAA,SAAA,MAAA,QACP,UAAS,GAAA;AAGR,UAAe,EAAA,MAAA,UAAY,KAAA,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAA,SAAA,KAAA,QAAA,EAAA,OAAA,kDAAA,EAAA,GAAA,MAAA,OAAA,EAAA,OAAA,CAAA,GAAA,SAAA,MAAA,QAAA,UAAA,GAAA;AAC7B,QAAA,CAAA,cAAkB,CAAA,WAAA;AAAA,YACJ,YAAA;AAAA,QACZ,YAAe;AAAA,QACf,eAAO;AAAA,QACR,OAAA;AAAA,MAAA,CACH;AAAA,IAEQ;AAAA,YACC;AAAA,MACP,OAAe,wCAAA,UAAA,OAAA,KAAA;AAAA,MAChB,eAAA;AAAA,IAED,CAAM;AACN,UAAM,cAAmB,eAAc,YAAA,UAAsB;AACvD,UAAA,mBAAc,IAAA,UAAiB,WAAA,WAAA;AAErC,UAAM,UAAiB,IAAA,UAAA,OAAA;AACjB,UAAA,QAAA;AACN,UAAM,qBAA6B,IAAA,KAAA;AACjC,UAAA,iBAA2B,YAAA;AAC3B,yBAA6C,QAAA;AAEzC,YAAA,YAAA;AACI,UAAA;AAEI,cACE,EAAA,MAAA,UAAA,MAAA,UAAA,KAAA,QAAA,EAAA,OAAA;AAAA,UACR,QAAa;AAAA,UACb,aAAiB;AAAA,UAElB,SAAS,QAAO;AAAA,QAEnB,CAAA,EAAA,GAAW,MAAA,OAAA,EAAA,OAAA;AACH,YAAA,OAAA;AACR,gBAAA,IAAA,MAAA,+BAAA,OAAA;AAAA,QACI;AACF,aAAA,6BAAA,YAAyB,GAAA;AACzB,2BAAU,QAAA;AAAA,gBACE,IAAA;AAAA,YACV,UAAS;AAAA,YACT,SAAM;AAAA,YACP,MAAA;AAAA,UAAA,CACH;AAAA;MAEA,SAAU,OAAA;AAAA,cACE,IAAA;AAAA,UACV;UACA,SAAM,MAAA,WAAA;AAAA,UACP,MAAA;AAAA,QAAA,CACD;AAAA,MACA,UAAA;AACF,2BAAA,QAAA;AAAA,MACF;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0,4,5,6]}