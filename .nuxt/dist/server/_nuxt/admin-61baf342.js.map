{"version":3,"file":"admin-61baf342.js","sources":["../../../../components/ProfileTable.vue","../../../../components/ProjectTable.vue","../../../../components/ClaimTable.vue","../../../../components/EditUserTypeForm.vue","../../../../components/CreateProjectForm.vue","../../../../components/AddProfileToProjectForm.vue","../../../../pages/admin.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport type { ProfileWithEmail } from 'types/user'\n\nconst props = defineProps<{\n  profiles: ProfileWithEmail[]\n}>()\n\nconst nodes = computed(() =>\n  props.profiles.map((profile) => ({\n    data: {\n      userType: profile.user_type,\n      ...profile,\n      name: `${profile.email} ${\n        profile.username ? `[${profile.username}]` : ''\n      }`,\n    },\n  }))\n)\n</script>\n\n<template>\n  <TreeTable\n    :value=\"nodes\"\n    :paginator=\"true\"\n    :rows=\"10\"\n    :rows-per-page-options=\"[10, 25, 50]\"\n    :auto-layout=\"true\"\n  >\n    <Column\n      field=\"id\"\n      header=\"Id\"\n      expander\n    />\n    <Column\n      field=\"name\"\n      header=\"User\"\n    />\n    <Column\n      field=\"email\"\n      header=\"Email\"\n    />\n    <Column\n      field=\"userType\"\n      header=\"User Type\"\n    />\n  </TreeTable>\n</template>\n","<script setup lang=\"ts\">\nimport type { TreeNode } from 'primevue/tree'\nimport type { Project } from 'types/database'\n\nconst props = defineProps<{\n  projects: Project[]\n}>()\n\nconst nodes = computed(() =>\n  props.projects.map(\n    (project): TreeNode => ({\n      data: {\n        ...project,\n      },\n    })\n  )\n)\n</script>\n\n<template>\n  <TreeTable\n    :auto-layout=\"true\"\n    :value=\"nodes\"\n    :paginator=\"true\"\n    :rows=\"10\"\n    :rows-per-page-options=\"[10, 25, 50]\"\n  >\n    <Column\n      field=\"id\"\n      header=\"Id\"\n      expander\n    />\n    <Column\n      field=\"name\"\n      header=\"Name\"\n    />\n    <Column\n      field=\"description\"\n      header=\"Description\"\n    />\n  </TreeTable>\n</template>\n","<script setup lang=\"ts\">\nimport { useConfirm } from 'primevue/useconfirm'\nimport type { TreeTableExpandedKeys } from 'primevue/treetable'\nimport type { TreeNode } from 'primevue/tree'\nimport type { ProfileProject, RemoveFromProjectPayload } from 'types/user'\n\nconst filters = ref<TreeTableExpandedKeys>({ name: '', email: '', role: '' })\nconst confirm = useConfirm()\nconst props = defineProps<{\n  profilesToProjects: ProfileProject[]\n  isLoading: boolean\n}>()\n\nconst confirmRemovalPermission = (userId: string, projectId: number) => {\n  confirm.require({\n    message: 'Do you want to delete this record?',\n    header: 'Delete Confirmation',\n    icon: 'pi pi-info-circle',\n    acceptClass: 'p-button-danger',\n    accept: () => {\n      emit('remove', { userId, projectId })\n    },\n  })\n}\n\nconst emit = defineEmits<{\n  (e: 'remove', payload: RemoveFromProjectPayload): void\n}>()\n\nconst nodes = computed(() => {\n  const projectsMap: TreeNode[] = []\n\n  props.profilesToProjects.forEach((item: ProfileProject) => {\n    const { projectId, name, email, userId, metadata } = item\n    if (!projectsMap[projectId]) {\n      projectsMap[projectId] = {\n        key: `${projectId}_${userId}`,\n        data: {\n          name,\n          projectId,\n          action: false,\n        },\n        children: [],\n      }\n    }\n\n    projectsMap[projectId].children?.push({\n      key: `${projectId}_${userId}`,\n      data: {\n        email,\n        userId,\n        projectId,\n        action: true,\n        role: metadata.user_role,\n      },\n    })\n  })\n\n  return Object.values(projectsMap)\n})\n</script>\n\n<template>\n  <TreeTable\n    :auto-layout=\"true\"\n    :value=\"nodes\"\n    :filters=\"filters\"\n    filter-mode=\"lenient\"\n    :paginator=\"true\"\n    :rows=\"10\"\n    :rows-per-page-options=\"[10, 25, 50]\"\n  >\n    <Column\n      field=\"name\"\n      header=\"Project Name\"\n      expander\n      sortable\n    >\n      <template #filter>\n        <InputText\n          v-model=\"filters['name']\"\n          type=\"text\"\n          class=\"p-column-filter\"\n          placeholder=\"Filter by name\"\n        />\n      </template>\n    </Column>\n    <Column\n      field=\"email\"\n      header=\"User Email\"\n    >\n      <template #filter>\n        <InputText\n          v-model=\"filters['email']\"\n          type=\"text\"\n          class=\"p-column-filter\"\n          placeholder=\"Filter by email\"\n        />\n      </template>\n    </Column>\n    <Column\n      field=\"role\"\n      header=\"User Role\"\n    >\n      <template #filter>\n        <InputText\n          v-model=\"filters['role']\"\n          type=\"text\"\n          class=\"p-column-filter\"\n          placeholder=\"Filter by role\"\n        />\n      </template>\n    </Column>\n    <Column\n      header=\"Action\"\n      name=\"action\"\n    >\n      <template #body=\"scope\">\n        <Button\n          v-if=\"scope.node.data.action\"\n          type=\"button\"\n          aria-label=\"Remove permission\"\n          title=\"Remove permission\"\n          :loading=\"isLoading\"\n          :disabled=\"isLoading\"\n          severity=\"danger\"\n          @click=\"\n            confirmRemovalPermission(\n              scope.node.data.userId,\n              scope.node.data.projectId\n            )\n          \"\n        >\n          Remove\n        </Button>\n      </template>\n    </Column>\n  </TreeTable>\n</template>\n","<script setup lang=\"ts\">\nimport { useForm } from 'vee-validate'\nimport { useToast } from 'primevue/usetoast'\nimport type { InvalidSubmissionContext } from 'vee-validate'\nimport type { Database, Json } from 'types/supabase'\nimport type { Profile } from 'types/database'\nimport { displayFirstError } from 'utils/form'\nimport { editUserTypeFormSchema } from 'validation/schema'\nimport { isSupabaseError, SupabaseError } from '~/plugins/error'\n\nconst { useFieldModel, handleSubmit, errors, submitCount, resetForm } = useForm(\n  {\n    validationSchema: editUserTypeFormSchema,\n  }\n)\n\nconst [user, userType] = useFieldModel(['user', 'userType'])\nconst types = ['auditor', 'viewer']\n\nconst supabase = useSupabaseClient<Database>()\nconst toast = useToast()\nconst isLoading = ref(false)\n\ndefineProps<{\n  users: Profile[]\n}>()\nconst emit = defineEmits<{ (e: 'after-submit'): void }>()\n\nconst { isSubmitted } = useValidation(submitCount)\n\nconst setClaim = async (uid: string, claim: string, value: Json) => {\n  const { data, error } = await supabase.rpc('set_claim', { uid, claim, value })\n  return { data, error }\n}\nconst onInvalidSubmit = ({ errors }: InvalidSubmissionContext) =>\n  displayFirstError(errors)\n\nconst editUserType = handleSubmit(async ({ user: id, userType: userRole }) => {\n  try {\n    isLoading.value = true\n    const authUser = useSupabaseUser()\n\n    if (authUser.value?.id) {\n      const { error } = await setClaim(id, 'user_role', userRole)\n\n      if (error) {\n        if (isSupabaseError(error)) {\n          throw new SupabaseError(error)\n        }\n\n        throw new Error(error?.message || '')\n      }\n\n      toast.add({\n        severity: 'success',\n        summary: 'Successfully edit user type',\n        life: 3000,\n      })\n\n      resetForm()\n      emit('after-submit')\n    }\n  } catch (error) {\n    const { $handleError } = useNuxtApp()\n\n    $handleError(error as Error | SupabaseError)\n  } finally {\n    isLoading.value = false\n  }\n}, onInvalidSubmit)\n</script>\n\n<template>\n  <Card class=\"mb-6\">\n    <template #content>\n      <form\n        class=\"mb-4\"\n        @submit=\"editUserType\"\n      >\n        <legend class=\"mb-4 font-bold underline\">Update user type</legend>\n\n        <div class=\"mb-6 grid gap-3 md:grid-cols-2\">\n          <div>\n            <label for=\"user_id\"> User </label>\n            <Dropdown\n              id=\"user_id\"\n              v-model=\"user\"\n              :options=\"users\"\n              :option-label=\"\n                ({ full_name, email, user_type }) =>\n                  `${full_name ?? email} [${user_type ?? 'user type not set'}]`\n              \"\n              option-value=\"id\"\n              placeholder=\"Select\"\n              class=\"md:w-14rem w-full\"\n              data-testid=\"claims-user-field\"\n              name=\"user\"\n              :class=\"[{ 'p-invalid': errors.user && isSubmitted }]\"\n            />\n            <small\n              v-if=\"errors.user && isSubmitted\"\n              class=\"p-error mt-1\"\n            >\n              {{ errors.user }}\n            </small>\n          </div>\n\n          <div>\n            <label for=\"user_type\">User type</label>\n            <Dropdown\n              id=\"user_type\"\n              v-model=\"userType\"\n              :options=\"types\"\n              placeholder=\"Select\"\n              class=\"md:w-14rem w-full\"\n              data-testid=\"account-userType-field\"\n              name=\"userType\"\n              :class=\"[{ 'p-invalid': errors.userType && isSubmitted }]\"\n            />\n            <small\n              v-if=\"errors.userType && isSubmitted\"\n              class=\"p-error mt-1\"\n            >\n              {{ errors.userType }}\n            </small>\n          </div>\n        </div>\n\n        <Button\n          :label=\"isLoading ? 'Loading ...' : 'Update'\"\n          type=\"submit\"\n          class=\"p-button-lg w-full\"\n          data-testid=\"edit-user-type-submit-button\"\n          :loading=\"isLoading\"\n          :disabled=\"isLoading\"\n        />\n      </form>\n    </template>\n  </Card>\n</template>\n","<script setup lang=\"ts\">\nimport { useForm } from 'vee-validate'\nimport { useToast } from 'primevue/usetoast'\nimport type { InvalidSubmissionContext } from 'vee-validate'\nimport type { Database } from 'types/supabase'\nimport { displayFirstError } from 'utils/form'\nimport { createProjectFormSchema } from 'validation/schema'\nimport { isSupabaseError, SupabaseError } from '~/plugins/error'\n\nconst { useFieldModel, handleSubmit, errors, submitCount, resetForm } = useForm(\n  {\n    validationSchema: createProjectFormSchema,\n  }\n)\n\nconst [name, description] = useFieldModel(['name', 'description'])\n\nconst supabase = useSupabaseClient<Database>()\nconst toast = useToast()\nconst isLoading = ref(false)\n\nconst emit = defineEmits<{ (e: 'after-submit'): void }>()\n\nconst { isSubmitted } = useValidation(submitCount)\n\nconst onInvalidSubmit = ({ errors }: InvalidSubmissionContext) =>\n  displayFirstError(errors)\n\nconst createProject = handleSubmit(async ({ name, description }) => {\n  try {\n    isLoading.value = true\n    const authUser = useSupabaseUser()\n\n    if (authUser.value?.id) {\n      const { error } = await supabase\n        .from('projects')\n        .insert({ name, description })\n\n      if (error) {\n        if (isSupabaseError(error)) {\n          throw new SupabaseError(error)\n        }\n\n        throw new Error(error?.message || '')\n      }\n\n      toast.add({\n        severity: 'success',\n        summary: 'Successfully create new project',\n        life: 3000,\n      })\n\n      resetForm()\n      emit('after-submit')\n    }\n  } catch (error) {\n    const { $handleError } = useNuxtApp()\n\n    $handleError(error as Error | SupabaseError)\n  } finally {\n    isLoading.value = false\n  }\n}, onInvalidSubmit)\n</script>\n\n<template>\n  <Card class=\"mb-6\">\n    <template #content>\n      <form\n        class=\"mb-4\"\n        @submit=\"createProject\"\n      >\n        <legend class=\"mb-4 font-bold underline\">Create project</legend>\n\n        <div class=\"mb-6 grid gap-3 md:grid-cols-2\">\n          <div>\n            <label for=\"project_name\">Name</label>\n            <InputText\n              id=\"project_name\"\n              v-model=\"name\"\n              class=\"w-full\"\n              data-testid=\"create-project-name-field\"\n              name=\"name\"\n              :class=\"[{ 'p-invalid': errors.name && isSubmitted }]\"\n            />\n            <small\n              v-if=\"errors.name && isSubmitted\"\n              class=\"p-error mt-1\"\n            >\n              {{ errors.name }}\n            </small>\n          </div>\n\n          <div>\n            <label for=\"project_description\">Description</label>\n            <InputText\n              id=\"project_description\"\n              v-model=\"description\"\n              class=\"w-full\"\n              data-testid=\"create-project-name-field\"\n              name=\"description\"\n              :class=\"[{ 'p-invalid': errors.description && isSubmitted }]\"\n            />\n            <small\n              v-if=\"errors.description && isSubmitted\"\n              class=\"p-error mt-1\"\n            >\n              {{ errors.description }}\n            </small>\n          </div>\n        </div>\n\n        <Button\n          :label=\"isLoading ? 'Loading ...' : 'Create'\"\n          type=\"submit\"\n          class=\"p-button-lg w-full\"\n          data-testid=\"create-project-submit-button\"\n          :loading=\"isLoading\"\n          :disabled=\"isLoading\"\n        />\n      </form>\n    </template>\n  </Card>\n</template>\n","<script setup lang=\"ts\">\nimport { useForm } from 'vee-validate'\nimport { useToast } from 'primevue/usetoast'\nimport type { InvalidSubmissionContext } from 'vee-validate'\nimport type { Database } from 'types/supabase'\nimport type { Project, Profile } from 'types/database'\nimport { displayFirstError } from 'utils/form'\nimport { addProfileToProjectFormSchema } from 'validation/schema'\nimport { isSupabaseError, SupabaseError } from '~/plugins/error'\n\nconst { useFieldModel, handleSubmit, errors, submitCount, resetForm } = useForm(\n  {\n    validationSchema: addProfileToProjectFormSchema,\n  }\n)\n\nconst [profile, project] = useFieldModel(['profile', 'project'])\n\nconst supabase = useSupabaseClient<Database>()\nconst toast = useToast()\nconst isLoading = ref(false)\n\ndefineProps<{\n  profiles: Profile[]\n  projects: Project[]\n}>()\nconst emit = defineEmits<{ (e: 'after-submit'): void }>()\n\nconst { isSubmitted } = useValidation(submitCount)\n\nconst onInvalidSubmit = ({ errors }: InvalidSubmissionContext) =>\n  displayFirstError(errors)\n\nconst addProfileToProject = handleSubmit(async ({ profile, project }) => {\n  // todo: add blocking duplication of entry in datatable\n  try {\n    isLoading.value = true\n    const authUser = useSupabaseUser()\n\n    if (authUser.value?.id) {\n      const { error } = await supabase.from('profile_project').insert({\n        profile_id: profile,\n        project_id: project,\n      })\n\n      if (error) {\n        if (isSupabaseError(error)) {\n          throw new SupabaseError(error)\n        }\n\n        throw new Error(error?.message || '')\n      }\n\n      emit('after-submit')\n      toast.add({\n        severity: 'success',\n        summary: 'You successfully added profile to project',\n        life: 3000,\n      })\n\n      resetForm()\n    }\n  } catch (error) {\n    const { $handleError } = useNuxtApp()\n\n    $handleError(error as Error | SupabaseError)\n  } finally {\n    isLoading.value = false\n  }\n}, onInvalidSubmit)\n</script>\n\n<template>\n  <Card>\n    <template #content>\n      <form @submit=\"addProfileToProject\">\n        <legend class=\"mb-4 w-full font-bold\">Add profile to projects</legend>\n\n        <div class=\"mb-6 grid gap-3 md:grid-cols-2\">\n          <div>\n            <label for=\"profile_id\">User</label>\n            <Dropdown\n              id=\"profile_id\"\n              v-model=\"profile\"\n              :options=\"profiles\"\n              :option-label=\"\n                ({ full_name, email, user_type }) =>\n                  `${full_name ?? email} [${user_type ?? 'user type not set'}]`\n              \"\n              option-value=\"id\"\n              placeholder=\"Select\"\n              class=\"w-full\"\n              data-testid=\"claims-user-field\"\n              name=\"client\"\n              :class=\"[{ 'p-invalid': errors.profile && isSubmitted }]\"\n            />\n            <small\n              v-if=\"errors.profile && isSubmitted\"\n              class=\"p-error mt-1\"\n            >\n              {{ errors.profile }}\n            </small>\n          </div>\n\n          <div>\n            <label\n              class=\"mr-2\"\n              for=\"project\"\n            >\n              Project\n            </label>\n            <Dropdown\n              id=\"project\"\n              v-model=\"project\"\n              :options=\"projects\"\n              :option-label=\"({ id, name }) => `${name} [${id}]`\"\n              option-value=\"id\"\n              placeholder=\"Select\"\n              class=\"w-full\"\n              data-testid=\"claims-project-field\"\n              name=\"project\"\n              :class=\"[{ 'p-invalid': errors.project && isSubmitted }]\"\n            />\n            <small\n              v-if=\"errors.project && isSubmitted\"\n              class=\"p-error mt-1\"\n            >\n              {{ errors.project }}\n            </small>\n          </div>\n        </div>\n\n        <Button\n          :label=\"isLoading ? 'Loading ...' : 'Update'\"\n          type=\"submit\"\n          class=\"p-button-lg w-full\"\n          data-testid=\"audit-submit-button\"\n          :loading=\"isLoading\"\n          :disabled=\"isLoading\"\n        />\n      </form>\n    </template>\n  </Card>\n</template>\n","<script setup lang=\"ts\">\nimport type { User } from '@supabase/gotrue-js'\nimport { useToast } from 'primevue/usetoast'\nimport type { Database } from 'types/supabase'\nimport type { Project, Profile, ProfileProjectKeys } from 'types/database'\nimport type {\n  ProfileProject,\n  ProfileWithEmail,\n  RemoveFromProjectPayload,\n} from 'types/user'\nimport { isSupabaseError, SupabaseError } from '~/plugins/error'\n\ndefinePageMeta({\n  middleware: [\n    defineNuxtRouteMiddleware(async () => {\n      const { data } = await useSupabaseClient<Database>().rpc(\n        'is_claims_admin'\n      )\n\n      if (!data) {\n        abortNavigation({\n          message: 'Access Denied: Contact Administrator for Assistance.',\n        })\n      }\n    }),\n  ],\n})\n\nconst supabase = useSupabaseClient<Database>()\nconst toast = useToast()\n\nconst isLoading = ref(false)\nconst isFetching = ref(true)\nconst profiles = ref<Profile[]>([])\nconst authData = ref<User[]>([])\nconst projects = ref<Project[]>([])\n\nconst profileProject = ref<ProfileProjectKeys>([])\n\nconst getAuthDataById = (id: string) =>\n  authData.value.find((user) => user.id === id)\n\nconst getUsersWithEmails = computed((): ProfileWithEmail[] =>\n  profiles.value.map(\n    (profile): ProfileWithEmail => ({\n      ...profile,\n      email: getAuthDataById(profile.id)?.email || '',\n    })\n  )\n)\nconst getProfileProject = computed((): ProfileProject[] =>\n  profileProject.value.map(\n    ({ profile_id: profileId, project_id: projectId }): ProfileProject => {\n      const user = getAuthDataById(profileId)\n      const projectData = projects.value.find(\n        (project) => project.id === projectId\n      )\n\n      return {\n        email: user?.email ?? '',\n        name: projectData?.name ?? '',\n        userId: user?.id ?? '',\n        projectId: projectData!.id,\n        metadata: user?.app_metadata || {},\n      }\n    }\n  )\n)\n\nconst { data } = await useFetch<{\n  users: User[]\n  aud: string\n  nextPage: number | null\n  lastPage: number\n  total: number\n}>('/api/users')\n\nauthData.value = data.value?.users || []\n\nasync function fetchProfiles() {\n  try {\n    const { data } = await supabase.from('profiles').select('*')\n    // @ts-ignore\n    profiles.value = data || []\n  } catch (error) {\n    console.error('Error fetching profiles:', error)\n  }\n}\n\nasync function fetchProjects() {\n  try {\n    const { data } = await supabase.from('projects').select('*')\n    projects.value = data || []\n  } catch (error) {\n    console.error('Error fetching projects:', error)\n  }\n}\n\nasync function fetchProjectProfile() {\n  try {\n    const { data } = await supabase.from('profile_project').select('*')\n    profileProject.value = data || []\n  } catch (error) {\n    console.error('Error fetching project profiles:', error)\n  }\n}\n\nasync function fetchData() {\n  try {\n    isFetching.value = true\n\n    await Promise.all([fetchProfiles(), fetchProjects(), fetchProjectProfile()])\n\n    isFetching.value = false\n  } catch (error) {\n    console.error('Error fetching data:', error)\n    isFetching.value = false\n  }\n}\n\nasync function removeProfileFromProject(payload: RemoveFromProjectPayload) {\n  isLoading.value = true\n\n  try {\n    const { error } = await supabase\n      .from('profile_project')\n      .delete()\n      .eq('profile_id', payload.userId)\n      .eq('project_id', payload.projectId)\n\n    if (error) {\n      if (isSupabaseError(error)) {\n        throw new SupabaseError(error)\n      }\n\n      throw new Error(error?.message || '')\n    }\n\n    fetchProjectProfile()\n\n    toast.add({\n      severity: 'success',\n      summary: 'Permission deleted',\n      life: 3000,\n    })\n  } catch (error) {\n    const { $handleError } = useNuxtApp()\n\n    $handleError(error as Error | SupabaseError)\n  } finally {\n    isLoading.value = false\n  }\n}\n\nonMounted(async () => {\n  await fetchData()\n})\n</script>\n\n<template>\n  <div class=\"grid\">\n    <h1>Admin page</h1>\n\n    <Spinner\n      v-if=\"isFetching\"\n      class=\"mx-auto my-10 w-40\"\n    />\n    <div v-else>\n      <Card class=\"mb-6 overflow-auto\">\n        <template #content>\n          <section class=\"mr-4\">\n            <h2 class=\"underline\">Profile list</h2>\n            <ProfileTable\n              v-if=\"getUsersWithEmails.length\"\n              :profiles=\"getUsersWithEmails\"\n            />\n            <p\n              v-else\n              class=\"ml-4\"\n            >\n              Profile list is empty.\n            </p>\n          </section>\n        </template>\n      </Card>\n\n      <Card class=\"mb-6 overflow-auto\">\n        <template #content>\n          <section class=\"mr-4\">\n            <h2 class=\"underline\">Project list</h2>\n            <ProjectTable\n              v-if=\"projects.length\"\n              :projects=\"projects\"\n            />\n            <p\n              v-else\n              class=\"ml-4\"\n            >\n              Project list is empty.\n            </p>\n          </section>\n        </template>\n      </Card>\n\n      <Card class=\"mb-6 overflow-auto\">\n        <template #content>\n          <section class=\"mr-4\">\n            <h2 class=\"underline\">Profile per Project list</h2>\n            <ClaimTable\n              v-if=\"getProfileProject.length\"\n              :is-loading=\"isLoading\"\n              :profiles-to-projects=\"getProfileProject\"\n              @remove=\"removeProfileFromProject\"\n            />\n            <p\n              v-else\n              class=\"ml-4\"\n            >\n              Profile per Project list is empty.\n            </p>\n          </section>\n        </template>\n      </Card>\n      <EditUserTypeForm\n        :users=\"getUsersWithEmails\"\n        @after-submit=\"fetchProfiles\"\n      />\n\n      <CreateProjectForm @after-submit=\"fetchProjects\" />\n\n      <AddProfileToProjectForm\n        :profiles=\"getUsersWithEmails\"\n        :projects=\"projects\"\n        @after-submit=\"fetchProjectProfile()\"\n      />\n    </div>\n  </div>\n</template>\n"],"names":["errors","name","description","profile","project","_a","_withAsyncContext"],"mappings":"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"}