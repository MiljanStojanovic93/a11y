{"version":3,"file":"AuditSelectReportTypeModalContent-10e7c1d0.js","sources":["../../../../components/AuditSelectReportTypeModalContent.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { useToast } from 'primevue/usetoast'\nimport type { Database } from 'types/supabase'\n\ndefineProps<{\n  noAxe: boolean\n}>()\n\nconst route = useRoute()\nconst auditId = route.params.id\nconst supabase = useSupabaseClient<Database>()\nconst NuxtLink = resolveComponent('NuxtLink')\nconst toast = useToast()\n\nconst areManualTestsValidated = ref(false)\nconst areManualTestsValid = ref(true)\n\nonMounted(async () => {\n  const { data: axeResults, error } = await supabase\n    .from('axe')\n    .select('form_data')\n    .eq('audit_id', auditId)\n\n  if (error || !axeResults) {\n    toast.add({\n      severity: 'error',\n      summary: 'Failed to validate manual tests.',\n      life: 3000,\n    })\n  } else {\n    areManualTestsValid.value = !axeResults.some((result) =>\n      result.form_data && Object.values(result.form_data).length > 0\n        ? Object.values(result.form_data).some(\n            (value) => value.manualTestResultsStatus === 'Not tested'\n          )\n        : true\n    )\n    areManualTestsValidated.value = true\n  }\n})\n</script>\n\n<template>\n  <h2 class=\"font-medium\">Select the type of report</h2>\n  <div class=\"divide-y\">\n    <div\n      v-if=\"!noAxe\"\n      class=\"py-4\"\n    >\n      <div class=\"grid grid-cols-[1fr_42px] items-center gap-4 md:gap-14\">\n        <div>\n          <h3 class=\"font-medium\">Review</h3>\n          <p>\n            Presents automatic and manual test results for all pages and screen\n            sizes sorted by categories. To generate this report you don't need\n            to have manual tests completed.\n          </p>\n        </div>\n        <NuxtLink\n          :to=\"`/audit/report/${auditId}?type=review`\"\n          class=\"p-button p-component p-button-icon-only p-button-rounded p-button-outlined\"\n        >\n          <span class=\"p-button-icon pi pi-chevron-right\" />\n        </NuxtLink>\n      </div>\n    </div>\n    <div class=\"py-4\">\n      <div class=\"grid grid-cols-[1fr_42px] items-center gap-4\">\n        <div>\n          <h3 class=\"font-medium\">Functional</h3>\n          <p>\n            <template v-if=\"noAxe\">\n              Presents manual test results for all screen sizes sorted by\n              categories. To generate this report you need to have manual tests\n              completed.\n            </template>\n            <template v-else>\n              The same report as the review but it requires complete manual\n              tests for all pages and screen sizes.\n            </template>\n            This means each test should have the status different than \"Not\n            tested\".\n          </p>\n          <p\n            v-if=\"areManualTestsValidated && !areManualTestsValid\"\n            class=\"text-red-700\"\n          >\n            Manual tests aren't completed yet.\n          </p>\n        </div>\n        <Component\n          :is=\"areManualTestsValid ? NuxtLink : 'div'\"\n          :to=\"`/audit/report/${auditId}?type=functional`\"\n          class=\"p-button p-component p-button-icon-only p-button-rounded p-button-outlined\"\n          :class=\"{\n            'p-button-secondary !cursor-not-allowed': !areManualTestsValid,\n            'p-button-secondary !cursor-wait': !areManualTestsValidated,\n          }\"\n        >\n          <span class=\"p-button-icon pi pi-chevron-right\" />\n        </Component>\n      </div>\n    </div>\n    <div class=\"py-4\">\n      <div class=\"grid grid-cols-[1fr_42px] items-center gap-4\">\n        <div>\n          <h3 class=\"font-medium\">WCAG</h3>\n          <p>\n            Mainly required for public sector. It's build on WCAG Success\n            Criterion to be compliant with the requirements of the law on\n            accessibility.\n          </p>\n          <p class=\"text-yellow-700\">Currently not available.</p>\n        </div>\n        <Component\n          :is=\"false ? NuxtLink : 'div'\"\n          class=\"p-button p-component p-button-icon-only p-button-rounded p-button-outlined\"\n          :class=\"{ 'p-button-secondary !cursor-not-allowed': true }\"\n        >\n          <span class=\"p-button-icon pi pi-chevron-right\" />\n        </Component>\n      </div>\n    </div>\n  </div>\n</template>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAQA,UAAM,QAAQ;AACR,UAAA,UAAU,MAAM,OAAO;AACZ,sBAA4B;AACvC,UAAA,WAAW;AACH,aAAS;AAEjB,UAAA,0BAA0B,IAAI,KAAK;AACnC,UAAA,sBAAsB,IAAI,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}