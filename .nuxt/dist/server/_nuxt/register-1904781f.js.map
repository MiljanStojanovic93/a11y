{"version":3,"file":"register-1904781f.js","sources":["../../../../pages/register.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport type { InvalidSubmissionContext } from 'vee-validate'\nimport type { Database } from 'types/supabase'\n\nimport { useToast } from 'primevue/usetoast'\nimport { useForm } from 'vee-validate'\nimport { signUpSchema } from 'validation/schema'\nimport { displayFirstError } from '~/utils/form'\n\ndefinePageMeta({\n  layout: 'simple',\n})\n\nconst supabase = useSupabaseClient<Database>()\nconst toast = useToast()\n\nconst { useFieldModel, handleSubmit, errors, submitCount } = useForm({\n  validationSchema: signUpSchema,\n})\nconst [email, newPassword, passwordConfirm] = useFieldModel([\n  'email',\n  'newPassword',\n  'passwordConfirm',\n])\nconst { isSubmitted } = useValidation(submitCount)\nconst onInvalidSubmit = ({ errors }: InvalidSubmissionContext) =>\n  displayFirstError(errors)\nconst signUp = handleSubmit(async ({ email, newPassword }) => {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password: newPassword,\n  })\n\n  if (error) {\n    toast.add({\n      severity: 'error',\n      summary: error.message,\n      life: 3000,\n    })\n  }\n\n  if (data.user) {\n    navigateTo('/login')\n\n    toast.add({\n      severity: 'success',\n      summary:\n        'Account successfully created. Please check your email to verify your account.',\n    })\n  }\n}, onInvalidSubmit)\n</script>\n\n<template>\n  <div class=\"mb-4\">\n    <h1 class=\"Login\">Register</h1>\n    <span>Let's get started</span>\n  </div>\n\n  <form\n    class=\"flex flex-col\"\n    novalidate\n    @submit.prevent=\"signUp\"\n  >\n    <span class=\"mb-4 w-full\">\n      <label for=\"email\"> Email </label>\n      <InputText\n        id=\"email\"\n        v-model=\"email\"\n        data-test-id=\"register-email-field\"\n        class=\"p-inputtext-lg md:w-25rem w-full\"\n        :class=\"[{ 'p-invalid': errors.email && isSubmitted }]\"\n        name=\"email\"\n      />\n      <small\n        v-if=\"errors.email && isSubmitted\"\n        class=\"p-error mt-1\"\n      >\n        {{ errors.email }}\n      </small>\n    </span>\n\n    <span class=\"mb-4 w-full\">\n      <label for=\"new-password\"> Password </label>\n      <Password\n        v-model=\"newPassword\"\n        input-id=\"new-password\"\n        data-testid=\"register-password-field\"\n        class=\"p-inputtext-lg md:w-25rem w-full\"\n        :class=\"[{ 'p-invalid': errors.newPassword && isSubmitted }]\"\n        input-class=\"w-full\"\n        :feedback=\"false\"\n        toggle-mask\n        :pt=\"{\n          input: {\n            name: 'newPassword',\n          },\n        }\"\n      />\n      <small\n        v-if=\"errors.newPassword && isSubmitted\"\n        class=\"p-error mt-1\"\n      >\n        {{ errors.newPassword }}\n      </small>\n    </span>\n\n    <span class=\"mb-10 w-full\">\n      <label for=\"password-confirm\"> Confirm password </label>\n      <Password\n        v-model=\"passwordConfirm\"\n        input-id=\"password-confirm\"\n        data-testid=\"register-confirm-password-field\"\n        class=\"p-inputtext-lg md:w-25rem w-full\"\n        :class=\"[{ 'p-invalid': errors.passwordConfirm && isSubmitted }]\"\n        input-class=\"w-full\"\n        :feedback=\"false\"\n        toggle-mask\n        :pt=\"{\n          input: {\n            name: 'passwordConfirm',\n          },\n        }\"\n      />\n      <small\n        v-if=\"errors.passwordConfirm && isSubmitted\"\n        class=\"p-error mt-1\"\n      >\n        {{ errors.passwordConfirm }}\n      </small>\n    </span>\n\n    <Button\n      class=\"p-button-lg mb-4 w-full\"\n      type=\"submit\"\n      label=\"Sign Up\"\n      data-testid=\"register-submit-button\"\n    />\n\n    <p class=\"mt-4\">\n      Already have an account?\n      <NuxtLink\n        to=\"/login\"\n        class=\"hover:text-primary transition-duration-300 cursor-pointer transition-colors\"\n      >\n        Login\n      </NuxtLink>\n    </p>\n  </form>\n</template>\n"],"names":["errors","email","newPassword"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,UAAM,WAAW;AACjB,UAAM,QAAQ;AAEd,UAAM,EAAE,eAAe,cAAc,QAAQ,YAAA,IAAgB,QAAQ;AAAA,MACnE,kBAAkB;AAAA,IAAA,CACnB;AACD,UAAM,CAAC,OAAO,aAAa,eAAe,IAAI,cAAc;AAAA,MAC1D;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AACD,UAAM,EAAE,YAAA,IAAgB,cAAc,WAAW;AACjD,UAAM,kBAAkB,CAAC,EAAE,QAAAA,QAAO,MAChC,kBAAkBA,OAAM;AACX,iBAAa,OAAO,EAAE,OAAAC,QAAO,aAAAC,mBAAkB;AAC5D,YAAM,EAAE,MAAM,MAAA,IAAU,MAAM,SAAS,KAAK,OAAO;AAAA,QACjD,OAAAD;AAAAA,QACA,UAAUC;AAAAA,MAAA,CACX;AAED,UAAI,OAAO;AACT,cAAM,IAAI;AAAA,UACR,UAAU;AAAA,UACV,SAAS,MAAM;AAAA,UACf,MAAM;AAAA,QAAA,CACP;AAAA,MACH;AAEA,UAAI,KAAK,MAAM;AACb,mBAAW,QAAQ;AAEnB,cAAM,IAAI;AAAA,UACR,UAAU;AAAA,UACV,SACE;AAAA,QAAA,CACH;AAAA,MACH;AAAA,OACC,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}